{
  "items": [
    {
      "creator": "Sohaib Nehal",
      "title": "Learn to create a line chart using D3.js",
      "link": "https://medium.freecodecamp.org/learn-to-create-a-line-chart-using-d3-js-4f43f1ee716b?source=rss----336d898217ee---4",
      "pubDate": "Wed, 02 May 2018 03:17:56 GMT",
      "content:encoded": "<h4>Use the power of D3.js to draw beautiful representations of your data.</h4><figure><a href=\"https://scrimba.com/g/gd3js\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YjFjjGpFZ-yDDrM97TKyVg.png\" /></a><figcaption>Learn D3.js for free on Scrimba</figcaption></figure><p>D3.js is an open source JavaScript library used to create beautiful data representations which we can view in any modern browser. Using D3.js, we can create various kinds of charts and graphs from our data.</p><p>In this tutorial, we are going to create a line chart displaying the Bitcoin Price Index from the past six months. We will be pulling in data from an external API and rendering a line chart with labels and an axis inside the DOM.</p><p><strong>We’ve also created a free D3.js course on Scrimba. </strong><a href=\"https://scrimba.com/g/gd3js\"><strong>Check it out here.</strong></a></p><h4>Getting started</h4><p>First of all, we will import the D3.js library directly from the CDN inside our HTML.</p><pre>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;svg&gt;&lt;/svg&gt;<br>    &lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;<br>&lt;/html&gt;</pre><p>We have also added an &lt;svg&gt;&lt;/svg&gt; tag inside our HTML to create the line chart inside it using D3.js</p><p>Let’s now move towards writing our JavaScript code. First of all, we want to load our data of the Bitcoin Price Index from an external API once the DOM has been loaded.</p><h4><strong>Fetch Data</strong></h4><pre>var api = &#39;https://api.coindesk.com/v1/bpi/historical/close.json?start=2017-12-31&amp;end=2018-04-01&#39;;</pre><pre>document.addEventListener(&quot;DOMContentLoaded&quot;, function(event) {<br>   fetch(api)<br>     .then(function(response) { return response.json(); })<br>     .then(function(data) { <br>         //DO SOMETHING WITH DATA  <br>     })<br>});</pre><p>In the code above, we are using the fetch method to get the data from an external API. We then parse it using the .json() method.</p><p>We now want to convert this data into key/value pairs so that they are in the format of date:price. For this, we are going to send our data to another function which will parse and return it in our desired form.</p><h4><strong>Parse Data</strong></h4><pre>....<br>.then(function(data) { <br>         var parsedData = parseData(data)<br> })</pre><pre>function parseData(data) {<br>   var arr = [];<br>   for (var i in data.bpi) {<br>      arr.push(<br>         {<br>            date: new Date(i), //date<br>            value: +data.bpi[i] //convert string to number<br>         });<br>   }<br>   return arr;<br>}</pre><p>We pass our data to a function parseData which returns another array of objects. Each object contains a date and the price of bitcoin on that particular date.</p><p>Once we have the data in our required format, we will send this data to the drawChart function in which all of the remaining code will be written using D3.js to render the line chart.</p><pre>....<br>.then(function(data) { <br>   var parsedData = parseData(data);<br>   drawChart(parsedData);<br>})</pre><h4>Select SVG element</h4><p>In the drawChart function, we first of all select our SVG element and provide it with some styling.</p><pre>function drawChart(data) {</pre><pre>   var svgWidth = 600, svgHeight = 400;<br>   var margin = { top: 20, right: 20, bottom: 30, left: 50 };<br>   var width = svgWidth - margin.left - margin.right;<br>   var height = svgHeight - margin.top - margin.bottom;</pre><pre>   var svg = d3.select(&#39;svg&#39;)<br>     .attr(&quot;width&quot;, svgWidth)<br>     .attr(&quot;height&quot;, svgHeight);<br>...</pre><p>In the code above, we are setting the width and height of the SVG container by first selecting it using the select() method and then using the attr() method to assign the attributes.</p><p>We have also defined margins and are using their values in calculating the width and height attributes of the SVG container. These margin values will help us later in positioning and displaying our chart correctly.</p><p>Using CSS, we have given borders to our SVG container:</p><pre>&lt;style&gt;<br>    .line-chart<br>    {<br>        border: 1px solid lightgray;<br>    }<br>&lt;/style&gt;</pre><p>So far, we have nothing inside our DOM yet:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/590/1*P62TLPk5q1SE7iS5BDGRfQ.png\" /></figure><p>Next up, we are going to create a group element to hold our line chart, axis, and labels.</p><h4><strong>Create and Transform Group Element</strong></h4><pre>...<br>var g = svg.append(&quot;g&quot;)<br>   .attr(&quot;transform&quot;, <br>      &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;<br>   );</pre><p>Grouping elements helps organize similar or related elements together. Here, after rendering a group element, we provide it some transformation.</p><p>D3 gives us various options to transform our elements. In the code above, we are using the translate property to reposition our group element with margins on its left and top.</p><h4><strong>Add Scales</strong></h4><p>Now, we want to add scales to our chart.</p><pre>var x = d3.scaleTime().rangeRound([0, width]);</pre><pre>var y = d3.scaleLinear().rangeRound([height, 0]);</pre><p>As we know, our data consists of dates and the value of Bitcoin on those dates. Therefore, we can assume that the x-axis would contain the dates and y-axis would contain values. That is how we can see the variation in the line chart with respect to time.</p><p>And so, in the code snippet above, we created a scale of type time on the x-axis and linear type on the y-axis. We are also providing these scales with the ranges as per the width and height of our SVG container.</p><h4>Create a Line</h4><p>Let’s now move towards defining our line by using the d3.line method. We will be defining the x and y attributes of the line by passing in anonymous functions and returning the date object and bitcoin value for that particular day.</p><pre>var line = d3.line()<br>   .x(function(d) { return x(d.date)})<br>   .y(function(d) { return y(d.value)})<br>   x.domain(d3.extent(data, function(d) { return d.date }));<br>   y.domain(d3.extent(data, function(d) { return d.value }));</pre><h4>Append Axises</h4><p>We are now going to append our left and bottom axes inside our group element for the line chart. The left axis will represent the value of bitcoin while the bottom axis displays the corresponding date.</p><pre>g.append(&quot;g&quot;)<br>   .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;)<br>   .call(d3.axisBottom(x))<br>   .select(&quot;.domain&quot;)<br>   .remove();</pre><p>In the above code, we are appending a group element inside our main group and translating it at the very bottom our container. Then, we pass d3.axisBottom method in the call function where d3.axisBottom takes the parameter of x which is defined in the <strong>Add Scales</strong> section.</p><pre>g.append(&quot;g&quot;)<br>   .call(d3.axisLeft(y))<br>   .append(&quot;text&quot;)<br>   .attr(&quot;fill&quot;, &quot;#000&quot;)<br>   .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)<br>   .attr(&quot;y&quot;, 6)<br>   .attr(&quot;dy&quot;, &quot;0.71em&quot;)<br>   .attr(&quot;text-anchor&quot;, &quot;end&quot;)<br>   .text(&quot;Price ($)&quot;);<br></pre><p>Similar to the bottom axis, we append another group element and then call on it the d3.axisLeft method which takes the parameter of y. Then, we also style our axis by assigning it different attributes and a label.</p><p>If we save and refresh the page, we can see our axes being rendered inside the DOM:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/596/1*g4xUQ-hRIIGna5WlSGcFTw.png\" /><figcaption>Left and bottom axes</figcaption></figure><h4>Append a Path</h4><p>In the last step, we will be appending a path inside our main group element. This path will actually draw the line chart as per the values of the data.</p><p>We pass our dataset using the datum method and then set the attributes of fill color, stroke color, and width. In the end, we set the attribute of d which actually gives instruction to the SVG path about where to connect the points of the path.</p><pre>g.append(&quot;path&quot;)<br>.datum(data)<br>.attr(&quot;fill&quot;, &quot;none&quot;)<br>.attr(&quot;stroke&quot;, &quot;steelblue&quot;)<br>.attr(&quot;stroke-linejoin&quot;, &quot;round&quot;)<br>.attr(&quot;stroke-linecap&quot;, &quot;round&quot;)<br>.attr(&quot;stroke-width&quot;, 1.5)<br>.attr(&quot;d&quot;, line);</pre><p>Here is the final result:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/598/1*x-3p2C-nd9_RbXOZG0Dx0A.png\" /><figcaption>Line chart</figcaption></figure><h4>Conclusion</h4><p>Congratulations! We have successfully created the line chart using D3.js. You can check out the official documentation of <a href=\"https://github.com/d3/d3/wiki\">D3.js</a> to learn more about different charts and graphs you can create.</p><p>If you’re interested in learning more about D3.js, be sure to <a href=\"https://scrimba.com/g/gd3js\">check out our free course on Scrimba.</a></p><p><em>I am Sohaib Nehal. I am a Full-Stack Web Application Developer. You can reach me at sohaib.nehal@ymail.com or on Twitter @Sohaib_Nehal. Thank you :-)</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4f43f1ee716b\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/learn-to-create-a-line-chart-using-d3-js-4f43f1ee716b\">Learn to create a line chart using D3.js</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Sohaib Nehal",
      "guid": "https://medium.com/p/4f43f1ee716b",
      "categories": [
        "programming",
        "web-development",
        "javascript",
        "d3js",
        "tech"
      ],
      "isoDate": "2018-05-02T03:17:56.000Z"
    },
    {
      "creator": "Phil Seaton",
      "title": "Feedback fail: discover the risk of Agile’s data-driven Achilles heel",
      "link": "https://medium.freecodecamp.org/feedback-fail-discover-the-risk-of-agiles-data-driven-achilles-heel-d1fc5096bc2c?source=rss----336d898217ee---4",
      "pubDate": "Wed, 02 May 2018 00:36:40 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cZdwkYpQotvwW2Si.\" /><figcaption>Sometimes Analog Information Gives the Clearest Direction</figcaption></figure><h3>Are you in danger of data-driven deceit?</h3><p>Agile is a thousand different things. Agile could be the prefix for “agile scrum,” or it could be the vague notion of “moving fast.” Engineers might mutter something about “continuous [delivery / deployment / integration].” <a href=\"https://www.visualstudio.com/learn/what-is-agile/\">Microsoft</a> has a page in the search results that appears right after the dictionary definition of the word. Did you know <a href=\"http://agilemanifesto.org/\">there’s a manifesto</a>? It’s full of short, vague principles. It’s like import this from Python. You can’t go wrong.</p><blockquote><em>Incremental Improvement without Dogma.</em></blockquote><p>That’s what I think of when I think of agile. But buried in all the ideas and books and blogs and seminars and real-life experiences of teams everywhere is a forgotten assumption, the Achilles’ Heel of Agile. There’s one shortcut to muck up agile fast. Ready?</p><h3>Feedback Is Not Optional</h3><p>Agile is a contract. <strong>In exchange for fast, incremental progress, you get fast, incremental feedback.</strong><em> </em>The fast feedback enables another increment of progress in the right direction. Over time, many increments can add up to something sensible and directional.</p><p>In the frenzy over agile, most people focus on the <strong>incremental progress</strong><em>.</em> Some forget about the <strong>incremental feedback</strong> that’s also part of the contract.</p><p>Without incremental feedback, agile can appear to work. <strong>But that’s Agile’s Achilles Heel: It can be a development methodology that appears reasonable and productive, but fails to deliver customer value.</strong></p><p>Without feedback, development will be directionless. A thousand minimum viable products will add up to a thousand little pieces. Customers may never see value if every MVP chips away in a different direction. This violates rule #1 from the manifesto:</p><blockquote>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</blockquote><p>Here to save the day: business processes that guarantee incremental feedback. There’s a raft of these that have to do with team internals, such as scrum retrospectives and manager one-on-one’s.</p><h3>The danger of mindless feedback</h3><p>I’m interested in the company-killing product feedback mechanisms. You know these heroes already: Data Science, A/B Testing, Objectives and Key Results (OKR), Key Performance Indicators (KPIs).</p><p>Each of these data-driven tools can fulfill the contract of agile. But there’s a danger: they’re habitual, automatic, and purposely dehumanized. Together these data driven strategies bring more gravitas than any gut decision could. “The data tells us” is the start of a sentence that can’t be contradicted.</p><p>Anything automatic can and will stop working if circumstances change. Every single one of these useful tools can be used to justify bad direction.</p><p>Many companies and teams have institutionalized feedback in one way or another. Just as it’s possible to have feedback “built in” to your workflows and processes, it’s possible for those very same “feedback enabled” processes and workflows to lie to you. How? By making you think you’re getting feedback when you’re not. Here are some scenarios, along with skeptical questions worth asking.</p><h4><strong>Data Science + A/B Testing</strong></h4><p>We know for sure that more people click the orange button in the bottom right than the blue button on the top right. Therefore, the orange button is better.</p><p>Is the fact that more people clicked / made it through the funnel / gave us their firstborn the only metric we care about? A/B tests almost always focus on the short term, narrow goal: more of X now.</p><p>But perhaps the business also has long-term goals, which might be served by the other option, or neither option? Perhaps it also wants to place qualitative limits on some options that seem too annoying / lack integrity / violate the mission.</p><h4><strong>OKRs + KPIs</strong></h4><p>We worked hard to define our Objectives, and we attached Key Results in numerical form so we’d know when we succeeded. Likewise, we worked hard to define our Key Performance Indicators so that they reflect the direction we want to grow in.</p><p>It’s great to have goals, and it’s great to be able to know when you’ve reached them or not. Numbers have a nice binary way of being reachable: you either make your numbers or you don’t.</p><p>But means matter arguably as much or more than ends. Did you make your numbers in a sustainable, repeatable way? KPIs can be modified and measure completely different things; are you sure they’re right? What if the business changes, and the KPIs aren’t updated?</p><h3>Solution for bad feedback: find a deeper connection</h3><p>For me, the lesson isn’t that Data Science, Analytics, A/B Testing, or Business Metrics are bad or don’t work. Most of the time, they’re useful tools. But it can be hard to see the human reality behind all the numbers at work these days. We have numbers that can be used by a clever automaton to justify even the worst decisions, business or otherwise.</p><p>The risk is an uncritical use of data fed right back into the next iteration.</p><p>I’m lazy. When I find something that works, I like to repeat it without thinking.</p><p>To make sure I’m critical of the feedback of my agile team, I try to break the routine from time to time. <strong>I try to connect with someone who actually talks with customers at least on a once-per-sprint kind of frequency.</strong></p><p>Lunch with someone in sales. Coffee with customer success. Calls with customers. Talking with actual people, face to face, about the product. That’s how I try to avoid the risk of data-driven agile.</p><p>Is bad feedback the first thing you hear about a recent product decision? Don’t dismiss it out of hand. Your numbers say it was the right move to double the number of ads on the page… but was it?</p><p>If you get too many of those wrong, it’s hard to add up all those MVPs.</p><p><strong>Was this piece thought provoking? Did I miss something huge, or hit the nail on the head? Please reach out in the comments, and connect on </strong><a href=\"https://www.linkedin.com/in/philseaton/\"><strong>LinkedIn</strong></a><strong>. I want to learn from your perspective!</strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d1fc5096bc2c\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/feedback-fail-discover-the-risk-of-agiles-data-driven-achilles-heel-d1fc5096bc2c\">Feedback fail: discover the risk of Agile’s data-driven Achilles heel</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Phil Seaton",
      "guid": "https://medium.com/p/d1fc5096bc2c",
      "categories": [
        "product-management",
        "agile",
        "engineering",
        "startup",
        "tech"
      ],
      "isoDate": "2018-05-02T00:36:40.000Z"
    },
    {
      "creator": "Denis Nuțiu",
      "title": "How to get started with FreeRTOS and ESP8266",
      "link": "https://medium.freecodecamp.org/how-to-get-started-with-freertos-and-esp8266-7a16035ddd71?source=rss----336d898217ee---4",
      "pubDate": "Sat, 03 Feb 2018 15:57:54 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2fa1eXR1ZEeWUA54bbY3Ag.jpeg\" /><figcaption><a href=\"https://www.pexels.com/photo/action-android-device-electronics-595804/\">Cover Photo by Matan Segev from PexelsCover</a></figcaption></figure><p>Recently, I purchased a NodeMCU from AliExpress for about $4. The reason I did this was to find out what all the fuss is about with ESP8266.</p><p>NodeMCU is an open source IoT platform. It includes firmware which runs on the ESP8266 Wi-Fi SoC from Espressif Systems, and hardware which is based on the ESP-12 module.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EWEUeXSlJu_l6gOrgaEV-w.png\" /><figcaption>Source: ESP8266 Datasheet</figcaption></figure><p>Compared to the Arduino UNO, my ESP8266 totally knocks it out of the park when it comes to CPU power and price.</p><p>The ESP8266 is 500% faster and 82% cheaper than the Arduino. The ESP8266 also has WiFi connectivity.</p><p>I was very surprised when I visited the <a href=\"https://www.espressif.com/en/products/hardware/esp8266ex/overview\">Espressif website</a> for the ESP8266. There’s lots of documentation and resources that you can use. For example, there’s an Android application which tells your ESP8266 to connect to your WiFi. The app sends the SSID and password as packets, the ESP8266 sniffs them, and then it connects to your WiFi. This is called SmartConfig, and was invented by Texas Instruments.</p><p>In this article, I will guide you to setup and run the Smart Config example from the Espressif RTOS SDK.</p><h4>Here’s the things you’ll need:</h4><ul><li>A modern computer.</li><li>A NodeMCU board with ESP12-E</li><li>VirtualBox (<a href=\"https://www.virtualbox.org/wiki/Downloads\">https://www.virtualbox.org/wiki/Downloads</a>)</li><li>Ubuntu Server LTS (<a href=\"https://www.ubuntu.com/download/server\">https://www.ubuntu.com/download/server</a>)</li></ul><h3>Configuring VirtualBox for development</h3><ol><li>Download VirtualBox and install Ubuntu Server. This should be easy to do, but if you don’t know how, Google it or have a look at this graphic <a href=\"https://dalanzg.github.io/tips-tutorials/ubuntu/2016/04/15/install-ubuntu-server-on-virtualbox/\">step by step guide</a>. Installing an OS is a nice skill to have. <em>(Tip: When VirtualBox prompts you to select the disk, make it dynamically allocated and at least 50GB in size. This will save you some headaches further down the line.)</em></li><li>Make sure that you can access the internet from within the virtual machine and configure the DNS server:</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*V-SF25laCXuVAyb-X0ZuEQ.png\" /><figcaption>Right click the machine then Settings -&gt; Network</figcaption></figure><p>To configure the DNS server, have a look at this <a href=\"https://askubuntu.com/questions/346838/how-do-i-configure-my-dns-settings-in-ubuntu-server\">example</a>.</p><blockquote>Example: dns-nameservers 8.8.8.8 8.8.4.4 If you can ping Google, then you’re good to go!</blockquote><p>3. (Optional) Install <a href=\"https://help.ubuntu.com/lts/serverguide/openssh-server.html\">OpenSSH</a> and <a href=\"https://help.ubuntu.com/lts/serverguide/samba-fileserver.html\">Samba</a> server. This will make your life much easier.</p><p>4. <strong>(Optional)</strong> Enable port forwarding. In order to SSH directly into your virtual machine, you need to enable port forwarding. For example, to map the <strong>port 2222</strong> on your <strong>host machine</strong> to the <strong>port 22</strong> of your <strong>virtual machine</strong>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mopy98pu7J-NNjCCzvXIkA.png\" /><figcaption>Enable Port forwarding: Settings -&gt; Network -&gt; <strong>Port Forwarding</strong></figcaption></figure><p>If you have enabled port forwarding, you can now SSH into your virtual machine from your Host machine as in the figure below.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yH8lZG3ik59kcvUK2xP-SQ.png\" /><figcaption>FIG1: ssh -p 2020 denis@localhost</figcaption></figure><p>Note: If you’re on Windows, you need <strong>Putty</strong> in order to SSH into the virtual machine.</p><p>5. Plug in your NodeMCU and execute the following command:</p><p>tail -f /var/log/kern.log</p><p>This should reveal to you that the device has been identified as /dev/ttyUSB0. If nothing happens, then you need to add the USB to the virtual machine. After adding the USB, unplug and plug your device in again.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ze6KZtDJsFp47eNX8MkXuw.png\" /><figcaption>Adding USB: Settings -&gt; Ports -&gt; USB</figcaption></figure><p>If you’ve reached this point and every thing is working, <strong>congratulations</strong>! You’re now ready to compile the SDK and run the SmartConfig example. You can even shoot me a tweet at <a href=\"https://twitter.com/metonymyqt\">https://twitter.com/metonymyqt</a></p><h3><strong>Compiling the SDK and flashing the board</strong></h3><ol><li>Install the required packages (as below). This info is also available on the SDK’s readme.md.</li></ol><pre>sudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial sed git unzip bash help2man wget bzip2 libtool-bin</pre><p>2. Create a new folder and navigate into it: mkdir Development &amp;&amp; cd Development</p><p>3. Clone the Open SDK: <a href=\"https://github.com/pfalcon/esp-open-sdk\">https://github.com/pfalcon/esp-open-sdk</a></p><p>git clone --recursive https://github.com/pfalcon/esp-open-sdk.git</p><p>3. Run make: make</p><p><strong>Warning: This step will take a while to finish so please be patient. </strong>On my virtual machine it completed after 50 minutes. On yours it might take more or less, but before you run, make make sure that you’re <strong>connected to the internet</strong> and <strong>DNS is properly configured</strong>. The best way to check this is to execute a ping to Google or some other site if Google is blocked in your region.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UkOiccf6gk6k0tTefWSirw.png\" /><figcaption>Successful ping command: $ ping medium.com</figcaption></figure><p>If your ping is successful, you can minimize the windows and watch an episode of your favorite TV show. Come back after about 40 minutes (but make sure your computer doesn’t go to sleep).</p><p>After the SDK has been built successfully, you’ll see a message telling you to put something in your path. To do so, execute the following:</p><pre>echo &#39;export PATH=/home/denis/Development/esp-open-sdk/xtensa-lx106-elf/bin:$PATH&#39; &gt;&gt; ~/.profile</pre><p>The command will append the string to the <strong>~/.profile</strong> file. Now please run the following command:</p><p>xtensa-lx106-elf-gcc --version</p><p>If the command executes successfully, then you’re good to go!</p><p>4. Test your board</p><p>Plug your NodeMCU and run <strong>lusb </strong>to verify that your device is connected. After that, run <strong>esptool.py chip_id</strong>. You should now see the board’s chip id.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3mr6Jko3o-82qVsDc9RKnw.png\" /><figcaption>esptool.py chip_id</figcaption></figure><p>5. Clone <a href=\"https://github.com/espressif/ESP8266_RTOS_SDK\">ESP8266_RTOS_SDK</a></p><pre>git clone https://github.com/espressif/ESP8266_RTOS_SDK.git</pre><p>6. Export the SDK path and SDK/BIN path using the commands below.</p><pre>echo &#39;export SDK_PATH=/home/denis/Development/ESP8266_RTOS_SDK&#39; &gt;&gt; ~/.profile</pre><pre>echo &#39;export BIN_PATH=/home/denis/Development/ESP8266_RTOS_SDK/bin&#39; &gt;&gt; ~/.profile</pre><p>7. Compile the SmartConfig example</p><pre>cd /home/denis/Development/ESP8266_RTOS_SDK/examples/<strong>smart_config</strong>/</pre><pre>chmod +x ./gen_misc.sh</pre><pre>./gen_misc.sh</pre><p>Now accept the default values until you’re asked for <strong>SPI_SIZE_MAP.</strong> This is where you select <strong>4</strong> because the NodeMCU has a flash size of 32Mbit and this translates to 4MB. <em>You can also select SPI_SPEED 3=80Mhz</em></p><p>You’ll see something like this:</p><pre>!!!<br>SDK_PATH: /home/denis/Development/ESP8266_RTOS_SDK<br>BIN_PATH: /home/denis/Development/ESP8266_RTOS_SDK/bin</pre><pre>No boot needed.<br>Generate eagle.flash.bin and eagle.irom0text.bin successully in BIN_PATH<br>eagle.flash.bin — — — →0x00000<br>eagle.irom0text.bin — →0x20000<br>!!!</pre><p>8. Flash the board</p><pre>cd $BIN_PATH</pre><pre>esptool.py erase_flash</pre><pre>esptool.py write_flash 0x00000 $BIN_PATH/eagle.flash.bin 0x20000 $BIN_PATH/eagle.irom0text.bin 0x3FC000 $BIN_PATH/esp_init_data_default.bin</pre><p>Now, if you reset the board, you should see no LED blinking.</p><p>9. Use the Phone Application</p><ul><li><a href=\"https://play.google.com/store/apps/details?id=com.cmmakerclub.iot.esptouch&amp;hl=en\">Android Application</a></li><li><a href=\"https://itunes.apple.com/us/app/ti-wifi-smartconfig/id580969322?mt=8\">iPhone Application</a></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EOr1AUjVaPolVMLdyoP4VQ.png\" /><figcaption>ScreenShot from my Android Device</figcaption></figure><p>Open the Application, make sure that you’re connected to a WiFi AP, enter your password, and press confirm. After a few seconds the ESP8266 should connect to your AP. That’s it. Congratulations for reaching the end!</p><p>If you want to develop more using the ESP8266-RTOS-SDK, please visit the official websites. You’ll find a lot of resources and documentation there. Also, please take a look at the other examples found in the SDK folder.</p><p>Thank you very much for your time reading this. If you want to reach out to me, you can do so on Twitter:<a href=\"https://twitter.com/metonymyqt\"> MetonymyQT</a></p><h4>Resources</h4><ul><li><a href=\"https://www.espressif.com/en/products/hardware/esp8266ex/overview\">ESP8266 Overview</a></li><li><a href=\"https://www.espressif.com/en/products/hardware/esp8266ex/resources\">ESP8266 Resources</a></li><li><a href=\"https://www.freertos.org/\">FreeRTOS Website</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7a16035ddd71\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/how-to-get-started-with-freertos-and-esp8266-7a16035ddd71\">How to get started with FreeRTOS and ESP8266</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Denis Nuțiu",
      "guid": "https://medium.com/p/7a16035ddd71",
      "categories": [
        "wifi",
        "tech",
        "electronics",
        "esp8266",
        "programming"
      ],
      "isoDate": "2018-02-03T15:57:54.000Z"
    },
    {
      "creator": "Evelyn Chan",
      "title": "The basics of destructuring props in React",
      "link": "https://medium.freecodecamp.org/the-basics-of-destructuring-props-in-react-a196696f5477?source=rss----336d898217ee---4",
      "pubDate": "Tue, 01 May 2018 23:46:40 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WUKuIELNzTHKfAeHLNlsqQ.jpeg\" /></figure><p>When I first learned about ES6, I was hesitant to start using it. I’d heard a lot of great things about the improvements but at the same time, I’d just gotten used to the good ol’ original way of doing things and here was a new syntax thrown at me to learn.</p><p>I avoided it for a while under the premise of “if it ain’t broke don’t fix it,” but I’ve recently grown fond of its simplicity and the fact that it’s becoming the norm in JavaScript.</p><p>With React, which fully embraces the ES6 syntax, destructuring adds a slew of benefits to improving your code. This article will go over the basics of destructuring objects and how it applies to props in React.</p><h3>Reasons to destructure</h3><h4><strong>Improves readability</strong></h4><p>This is a huge upside in React when you’re passing down props. Once you take the time to destructure your props, you can get rid of props / this.props in front of each prop.</p><p>If you’re abstracting your components into different files, you’ll also have a handy place to quickly reference what props you’re passing down without having to switch tabs. This double check helps you catch errors such as passing down excess props or typos.</p><p>You can go a step further by adding in propType validation, which allows you to define the type of each prop you pass in. When you’re in a development environment, this triggers React to log a warning if the type is different from the one defined.</p><p>Props can be difficult to keep track of in complex apps, so clearly defining your props as you pass them down is immensely helpful for anyone reading your code.</p><h4><strong>Shorter lines of code</strong></h4><p>See the following before ES6:</p><pre>var object = { one: 1, two: 2, three: 3 }</pre><pre>var one = object.one;<br>var two = object.two;<br>var three = object.three</pre><pre>console.log(one, two, three) // prints 1, 2, 3</pre><p>It’s long, clunky, and takes way too many lines of code. With destructuring, your code becomes much more clear.</p><p>In the example below, we’ve effectively cut down the number of lines to two:</p><pre>let object = { one: 1, two: 2, three: 3 }</pre><pre>let { one, two, three } = object;</pre><pre>console.log(one, two, three) // prints 1, 2, 3</pre><h4><strong>Syntactic sugar</strong></h4><p>It makes code look nicer, more succinct, and like someone who knows what they’re doing wrote it. I’m somewhat reiterating the first point here, but then again if it improves readability, why wouldn’t you do it?</p><h3>Functional vs. Class Components</h3><p>Destructuring in React is useful for both functional and class components but is achieved just a tad bit differently.</p><p>Let’s consider a parent component in our application:</p><pre>import React, { Component } from &#39;react&#39;;</pre><pre>class Properties extends Component {<br>  constructor() {<br>    super();<br>    this.properties = [<br>      {<br>        title: &#39;Modern Loft&#39;,<br>        type: &#39;Studio&#39;,<br>        location: {<br>          city: &#39;San Francisco&#39;,<br>          state: &#39;CA&#39;,<br>          country: &#39;USA&#39;<br>        }<br>      },<br>      {<br>        title: &#39;Spacious 2 Bedroom&#39;,<br>        type: &#39;Condo&#39;,<br>        location: {<br>          city: &#39;Los Angeles&#39;,<br>          state: &#39;CA&#39;,<br>          country: &#39;USA&#39;<br>        }<br>      },<br>    ];<br>  }</pre><pre>render() {<br>    return (<br>      &lt;div&gt;<br>        &lt;Listing listing={this.properties[0]} /&gt;<br>        &lt;Listing listing={this.properties[1]} /&gt;<br>      &lt;/div&gt;<br>    );<br>  }<br>}</pre><h4>Functional Components</h4><p>In this example, we want to pass down a listing object from our array of properties for the child component to render.</p><p>Here’s how a functional component would look:</p><pre>const Listing = (props) =&gt; (<br>  &lt;div&gt;<br>    &lt;p&gt;Title: {props.listing.title}&lt;/p&gt;<br>    &lt;p&gt;Type: {props.listing.type}&lt;/p&gt;<br>    &lt;p&gt;<br>      Location: {props.listing.location.city},<br>      {props.listing.location.state},<br>      {props.listing.location.country}<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>);</pre><p>This block of code is fully functional but looks terrible! By the time we get to this Listing child component, we already know we’re referencing a listing, so props.listing looks and feels redundant. This block of code can be made to look much cleaner through destructuring.</p><p>We can achieve this in the function parameter as we pass in the props argument:</p><pre>const Listing = ({ listing }) =&gt; (<br>  &lt;div&gt;<br>    &lt;p&gt;Title: {listing.title}&lt;/p&gt;<br>    &lt;p&gt;Type: {listing.type}&lt;/p&gt;<br>    &lt;p&gt;<br>      Location: {listing.location.city},<br>      {listing.location.state},<br>      {listing.location.country}<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>);</pre><p>Even better, we can further destructure nested objects like below:</p><pre>const Listing = ({<br>  listing: {<br>    title,<br>    type,<br>    location: {<br>      city,<br>      state,<br>      country<br>    }<br>  }<br>}) =&gt; (<br>  &lt;div&gt;<br>    &lt;p&gt;Title: {title}&lt;/p&gt;<br>    &lt;p&gt;Type: {type}&lt;/p&gt;<br>    &lt;p&gt;Location: {city}, {state}, {country}&lt;/p&gt;<br>  &lt;/div&gt;<br>);</pre><p>Can you see how much easier this is to read? In this example, we’ve destructured both listings and the keys inside listing.</p><p>A common gotcha is destructuring only the keys like we do below and trying to access the object:</p><pre>{ location: { city, state, country } }</pre><p>In this scenario, we wouldn’t be able to access the location object through a variable named location.</p><p>In order to do so, we’d have to define it first with a simple fix like so:</p><pre>{ location, location: { city, state, country } }</pre><p>This wasn’t glaringly obvious to me at first, and I’d occasionally run into problems if I wanted to pass an object like location as a prop after destructuring its contents. Now you’re equipped to avoid the same mistakes I made!</p><h4>Class Components</h4><p>The idea is very much the same in class components, but the execution is a little different.</p><p>Take a look below:</p><pre>import React, { Component } from &#39;react&#39;;</pre><pre>class Listing extends Component {<br>  render() {<br>    const {<br>      listing: {<br>        title,<br>        type,<br>        location: {<br>          city,<br>          state,<br>          country<br>        }<br>      }<br>    } = this.props;</pre><pre>return (<br>      &lt;div&gt;<br>        &lt;p&gt;Title: {title}&lt;/p&gt;<br>        &lt;p&gt;Type: {type}&lt;/p&gt;<br>        &lt;p&gt;<br>          Location: {city}, {state}, {country}<br>        &lt;/p&gt;<br>      &lt;/div&gt;<br>    )<br>  }<br>}</pre><p>You may have noticed in the parent example that we can destructure the Component object as we import React in class components. This isn’t necessary for functional components as we won’t be extending the Component class for those.</p><p>Next, instead of destructuring in the argument, we destructure wherever the variables are being called. For example, if we take the same Listing child component and refactor it into a class, we would destructure in the render function where the props are being referenced.</p><p>The downside to destructuring in class components is that you’ll end up destructuring the same props each time you use it in a method. Although this can be repetitive, I’d argue that a positive is it clearly outlines which props are being used in each method.</p><p>In addition, you won’t have to worry about side effects such as accidentally changing a variable reference. This method keeps your methods separate and clean, which can be a huge advantage for other operations during your projects such as debugging or writing tests.</p><p>Thanks for reading! If this helped you, please clap and/or share this article so it can help others too! :)</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a196696f5477\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/the-basics-of-destructuring-props-in-react-a196696f5477\">The basics of destructuring props in React</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Evelyn Chan",
      "guid": "https://medium.com/p/a196696f5477",
      "categories": [
        "tech",
        "programming",
        "web-development",
        "react",
        "es6"
      ],
      "isoDate": "2018-05-01T23:46:40.000Z"
    },
    {
      "creator": "Flavio Copes",
      "title": "Working with the DevTools Console and Console API: an overview",
      "link": "https://medium.freecodecamp.org/working-with-the-devtools-console-and-console-api-an-overview-13cff6dc3db4?source=rss----336d898217ee---4",
      "pubDate": "Tue, 01 May 2018 22:52:21 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/965/1*RCQMBXKwKkafg2vfeTvblQ.png\" /></figure><p>Every browser exposes a console that lets you interact with the <a href=\"https://flaviocopes.com/web-platform/\">Web Platform APIs</a> and gives you an inside look at the code by printing messages that are generated by your <a href=\"https://flaviocopes.com/javascript/\">JavaScript</a> code running in the page.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*V6dVQV5Zys-NJCUg.png\" /></figure><h3>Overview of the console</h3><p>The console toolbar is simple. There’s a button to clear the console messages, something you can also do by clicking cmd-K in macOS (Mac), or ctrl-K on Windows (Win).</p><p>A second button activates a filtering sidebar that lets you filter by text or by type of message. You can filter by error, warning, info, log, or debug messages.</p><p>You can also choose to hide network-generated messages, and just focus on the JavaScript log messages.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*TKDOkJHPCFg6eCrf.png\" /></figure><p>The console is not just a place where you can see messages, but also the best way to interact with JavaScript code, and many times the DOM. Or just get information from the page.</p><p>Let’s type our first message. Notice the &gt;.</p><p>Let’s click there and type:</p><pre>console.log(&#39;test&#39;)</pre><p>The console acts as a <strong>REPL</strong>, which means read–eval–print loop. In short, it interprets our JavaScript code and prints something.</p><h3>Use console.log formatting</h3><p>As you see, console.log(&#39;test&#39;) prints test in the Console.</p><p>Using console.log in your JavaScript code can help you debug, for example by printing static strings. But you can also pass it a variable, which can be a JavaScript native type, such as an integer or an object.</p><p>You can pass multiple variables to console.log:</p><pre>console.log(&#39;test1&#39;, &#39;test2&#39;)</pre><p>We can also format pretty phrases by passing variables and a format specifier:</p><pre>console.log(&quot;My %s has %d years&quot;, &#39;cat&#39;, 2)</pre><ul><li>%s formats a variable as a string</li><li>%d or %i formats a variable as an integer</li><li>%f formats a variable as a floating point number</li><li>%o can be used to print a DOM Element</li><li>%O used to print an object representation</li></ul><p>For example:</p><pre>console.log(&quot;%o, %O&quot;, document.body, document.body)</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*U2obMCSiuAw2Jq95.png\" /></figure><p>Another useful format specifier is %c, which allows us to pass CSS to format a string:</p><pre>console.log(&quot;%c My %s has %d years&quot;, &quot;color: yellow; background:black; font-size: 16pt&quot;, &quot;cat&quot;, 2)</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/680/0*SbDrhw2eVi4M-TuC.png\" /></figure><h3>Clear the console</h3><p>There are three ways to clear the console while working on it, with various input methods.</p><p>The first way is to click the <strong>Clear Console Log</strong> button on the console toolbar.</p><p>The second method is to type console.clear() inside the console, or in your <a href=\"https://flaviocopes.com/javascript-functions/\">JavaScript function</a> that runs in your app / site.</p><p>You can also just type clear().</p><p>The third way is through a keyboard shortcut. It’s cmd-k (Mac) or ctrl + l (Win).</p><h3>Counting elements</h3><p>console.count() is a handy method.</p><p>Take this code:</p><pre>const x = 1<br>const y = 2<br>const z = 3</pre><pre>console.count(&quot;The value of x is &quot; + x + &quot; and has been checked .. how many times?&quot;)<br>console.count(&quot;The value of x is &quot; + x + &quot; and has been checked .. how many times?&quot;)<br>console.count(&quot;The value of y is &quot; + y + &quot; and has been checked .. how many times?&quot;)</pre><p>What happens is that count will count the number of times a string is printed, and print the count next to it:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/677/0*9X7W32xXlmkd8W0j.png\" /></figure><p>You can just count apples and oranges:</p><pre>const oranges = [&#39;orange&#39;, &#39;orange&#39;]<br>const apples = [&#39;just one apple&#39;]</pre><pre>oranges.forEach((fruit) =&gt; {<br>  console.count(fruit)<br>})</pre><pre>apples.forEach((fruit) =&gt; {<br>  console.count(fruit)<br>})</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/686/0*6KajOJSDcJpH--DB.png\" /></figure><h3>Log more complex objects</h3><p>console.log is pretty amazing to inspect variables. You can pass it an object too, and it will do its best to print it to you in a readable way. Most of the times, this means it prints a string representation of the object.</p><p>Let’s try:</p><pre>console.log([1, 2])</pre><p>Another option to print objects is to use console.dir:</p><pre>console.dir([1, 2])</pre><p>As you can see, this method prints the variable in a JSON-like representation, so you can inspect all its properties.</p><p>The same thing that console.dir outputs is achievable by doing:</p><pre>console.log(&quot;%O&quot;, [1,2])</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/685/0*ybrpBjMmnB5OCiqM.png\" /></figure><p>Which one to use depends on what you need to debug, of course. You’ll have to decide which one of the two can do the best job for you.</p><p>Another function is console.table() which prints a nice table.</p><p>We just need to pass it an array of elements, and it will print each array item in a new row:</p><pre>console.table([[1,2], [&#39;x&#39;, &#39;y&#39;]])</pre><p>You can also set column names, by passing an Object Literal instead of an array, so it will use the object property as the column name:</p><pre>console.table([{x: 1, y: 2, z: 3}, {x: &quot;First column&quot;, y: &quot;Second column&quot;, z: null}])</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/687/0*01oKVSkDgKHnwGJD.png\" /></figure><p>console.table can also be more powerful. If you pass it an object literal that in turn contains an object, and you pass an array with the column names, it will print a table with the row indexes taken from the object literal.</p><p>For example:</p><pre>const shoppingCart = {}</pre><pre>shoppingCart.firstItem  = {&#39;color&#39;: &#39;black&#39;, &#39;size&#39;: &#39;L&#39;}<br>shoppingCart.secondItem = {&#39;color&#39;: &#39;red&#39;,   &#39;size&#39;: &#39;L&#39;}<br>shoppingCart.thirdItem  = {&#39;color&#39;: &#39;white&#39;, &#39;size&#39;: &#39;M&#39;}</pre><pre>console.table(shoppingCart, [&quot;color&quot;, &quot;size&quot;])</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/674/0*Jt9qNCWVZZqMw3yl.png\" /></figure><h3>Logging different error levels</h3><p>As we saw, console.log is great for printing messages in the Console.</p><p>We’ll now discover three more handy methods that will help us debug, because they implicitly indicate various levels of error.</p><p><strong>console.info()<br></strong>As you can see, a little ‘i’ is printed beside it, making it clear the log message is just an information.</p><p><strong>console.warn()<br></strong>Prints a yellow exclamation point.</p><p>If you activate the Console filtering toolbar, you can see that the Console allows you to filter messages based on the type, so it’s really convenient to differentiate messages. For example if we now click ‘Warnings’, all the printed messages that are not warnings will be hidden.</p><p><strong>console.error()<br></strong>This is a bit different than the others, because in addition to printing a red X which clearly states there’s an error, we have the full stack trace of the function that generated the error. So then we can go and try to fix it.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/742/0*1lIbab4HNNlvjsIv.png\" /></figure><p>Console messages are cleared on every page navigation, unless you check the <strong>Preserve log</strong> in the console settings:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1014/0*Bchj9bxRhWNpDctU.png\" /></figure><h3>Grouping console messages</h3><p>The Console messages can grow in size, and the noise when you’re trying to debug an error can be overwhelming.</p><p>To limit this problem, the Console API offers a handy feature: grouping the Console messages.</p><p>Let’s do an example first:</p><pre>console.group(&quot;Testing the location&quot;) </pre><pre>console.log(&quot;Location hash&quot;, location.hash) <br>console.log(&quot;Location hostname&quot;, location.hostname) console.log(&quot;Location protocol&quot;, location.protocol) </pre><pre>console.groupEnd()</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/671/0*SRzJZN6UJGfE8AjQ.png\" /></figure><p>As you can see, the Console creates a group, and there we have the Log messages.</p><p>You can do the same, but output a collapsed message that you can open on demand to further limit the noise:</p><pre>console.groupCollapsed(&quot;Testing the location&quot;) </pre><pre>console.log(&quot;Location hash&quot;, location.hash) <br>console.log(&quot;Location hostname&quot;, location.hostname) <br>console.log(&quot;Location protocol&quot;, location.protocol) </pre><pre>console.groupEnd()</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/0*bBkPYZqv85GQO2UN.png\" /></figure><p>The nice thing is that those groups can be nested, so you can end up doing:</p><pre>console.group(&quot;Main&quot;)<br>console.log(&quot;Test&quot;)<br>console.group(&quot;1&quot;)<br>console.log(&quot;1 text&quot;)<br>console.group(&quot;1a&quot;)<br>console.log(&quot;1a text&quot;)<br>console.groupEnd()<br>console.groupCollapsed(&quot;1b&quot;)<br>console.log(&quot;1b text&quot;)<br>console.groupEnd()<br>console.groupEnd()</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/652/0*Nyocne2FuLz5mGpD.png\" /></figure><h3>Print the stack trace</h3><p>There might be cases where it’s useful to print the call stack trace of a function, maybe to answer the question: “How did you reach that part of code?”</p><p>You can do so using console.trace():</p><pre>const function2 = () =&gt; console.trace() <br>const function1 = () =&gt; function2() <br>function1()</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/584/0*FGHCTEdtpwo-OxXq.png\" /></figure><h3>Calculate the time spent</h3><p>You can easily calculate how much time a function takes to run, using time() and timeEnd().</p><pre>const doSomething = () =&gt; console.log(&#39;test&#39;)<br>const measureDoingSomething = () =&gt; {<br>  console.time(&#39;doSomething()&#39;)<br>  //do something, and measure the time it takes<br>  doSomething()<br>  console.timeEnd(&#39;doSomething()&#39;)<br>}<br>measureDoingSomething()</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/690/0*TDa4iA505Xjrd2CE.png\" /></figure><h3>Generate a CPU profile</h3><p>The DevTools allow you to analyze the CPU profile performance of any function.</p><p>You can start that manually. But the most accurate way to do so is to wrap what you want to monitor between the profile() and profileEnd() commands.</p><p>They are similar to time() and timeEnd(), except they don’t just measure time, but create a more detailed report:</p><pre>const doSomething = () =&gt; console.log(&#39;test&#39;)<br>const measureDoingSomething = () =&gt; {<br>  console.profile(&quot;doSomething()&quot;)<br>  //do something, and measure its performance<br>  doSomething()<br>  console.profileEnd()<br>}<br>measureDoingSomething()</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1017/0*YfuzZh1mJbg2BEMq.png\" /></figure><p>I wrote a book on <a href=\"https://gumroad.com/l/FKbd/50off\">Modern Web Development</a> including React, Redux, GraphQL, modern CSS, Progressive Web Apps, Webpack, Babel, Service Workers, Fetch, Web Push Notifications and lots of other things.</p><p>Originally published at <a href=\"https://flaviocopes.com/console-api/\">flaviocopes.com</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=13cff6dc3db4\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/working-with-the-devtools-console-and-console-api-an-overview-13cff6dc3db4\">Working with the DevTools Console and Console API: an overview</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Flavio Copes",
      "guid": "https://medium.com/p/13cff6dc3db4",
      "categories": [
        "javascript",
        "coding",
        "software-development",
        "programming",
        "tech"
      ],
      "isoDate": "2018-05-01T22:52:21.000Z"
    },
    {
      "creator": "Michael Douglass",
      "title": "How to choose the right container orchestration and how to deploy it",
      "link": "https://medium.freecodecamp.org/how-to-choose-the-right-container-orchestration-and-how-to-deploy-it-41844021c241?source=rss----336d898217ee---4",
      "pubDate": "Tue, 01 May 2018 17:21:03 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bYL46jvuTzhBeoswADSHiw.jpeg\" /></figure><p>Running server processes inside containers is here to stay. If your environment is small with a couple of servers running a few dozen containers, you can likely get away with doing everything by hand. Beyond that scale, you need great tooling to deal with the heavy lifting and provide a common, baseline functionality. The alternative is a lot of tedious, error-prone, repetitive, manual work.</p><p>If you do not utilize a CI/CD pipeline and an orchestration system, development and operations will have to perform extreme, continuous collaboration and coordination.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8Ia2JL_X2ZDIzaZRFa5P9w.jpeg\" /><figcaption>Image Courtesy Julius Silver - <a href=\"https://www.pexels.com/photo/white-water-boat-753331/\">Pexels.com</a> — I sure hope they have an orchestration for how containers are loaded on these vessels… I cannot imagine the variables involved: Weight distribution. Destination and order of removal. Volatility. This image makes me glad I work in software where I get to help manage the complexity!</figcaption></figure><p>When I began investigating the world of microservices earlier this year, I had no idea of the extensive support infrastructure I would discover. Kubernetes has been an absolute treasure trove of a find, and Istio appears to be simply amazing for microservices — even though I know I have only scratched the surface of both these technologies.</p><p>From its humble beginnings less than three years ago, Kubernetes has quickly grown to be an amazing orchestration engine employed by countless corporations and embedded in many other projects. As a software designer with multiple decades under my belt, I am quite impressed with the Kubernetes architecture. It is extremely modular and built under the expectation that many pieces can be replaced. In some cases there are already numerous choices for a given component.</p><p>All of this newness and multiplicity of choice can make getting started quite daunting. Just as I sit on the precipice of going full bore into Kubernetes, I am struck by a more fundamental decision…</p><h3>Making the Right Container Orchestration Choice</h3><p>As I began to dig deeper into the world of container orchestration, it became apparent that there are more than a few choices available. My instincts told me Kubernetes is the thing to use, but I also began to question how I’d know if I was right. There is nothing quite like uncertainty to make one dig deeper.</p><p>The first question I had was, what are the alternatives for container orchestration?</p><p>After spending a reasonable amount of time searching and reading, here is the list of orchestration systems I could find:</p><ul><li><a href=\"http://kubernetes.io\">Kubernetes</a> - The apparent big-daddy of them all. The project itself is very active, and the architecture gives me comfort that continued development is going to be swift and safe. This is my instinctive choice.</li><li><a href=\"https://docs.docker.com/engine/swarm/\">Docker Swarm</a> - This is built into Docker by default, and has a lot of core functionality you want in a system. It has a lot of parity with Kubernetes, but it lacks a key item in that the free, open-source version is Role Based Access Control (RBAC). You can get that in the paid, Enterprise version.</li><li><a href=\"https://github.com/mesosphere/marathon\">Marathon</a> on <a href=\"http://mesos.apache.org/\">Mesos</a> - Mesos itself is a highly scalable clustering system for running tasks of all kinds. It relies on frameworks to support different kinds of tasks, and Marathon is the plugin which provides the support for container orchestration within the Mesos ecosystem. The <a href=\"http://mesos.apache.org/documentation/latest/frameworks/\">list of frameworks</a> is impressive.</li><li><a href=\"https://github.com/Netflix/titus\">Titus</a> - As I was writing this, Netflix <a href=\"https://medium.com/netflix-techblog/titus-the-netflix-container-management-platform-is-now-open-source-f868c9fb5436\">open-sourced</a> their internal orchestration system. Thanks Netflix! Titus was designed to provide the tightest of integrations with the Amazon AWS infrastructure (where Netflix maintains its operations). One of their intentions is that other projects will use their technology so that Netflix can use them in the future.</li><li><a href=\"https://github.com/rancher/cattle\">Cattle</a> - This is the orchestration engine made for and embedded within the Rancher system. I did not give Cattle a very deep look, since its parent project has apparently bought into Kubernetes as its preferred and primary orchestration engine. The main title on the Rancher website reads, “Enterprise Kubernetes Made Easy.” The page is riddled with how it helps you run Kubernetes clusters. No mention of Cattle exists on the webpage. It is clear the Rancher project has made its choice.</li><li><a href=\"https://www.nomadproject.io/\">Nomad</a> - Okay, this is Hashicorp. As a huge fan of Hashicorp, I would feel unjust if I did not give their product at least a once over. The product looks interesting on the surface with some fairly major paywall concerns. Namespaces are only available in the enterprise version. For service discovery, you’d have to add on Consul, and for secret management, you’d need to add on Vault. By a review of the documentation, it also appears to lack basic CNI configuration — the primary discussion for networking configuration is on mapping ports and static IP mappings.</li><li>Kontena - This is a visually stunning product. You can run in their cloud offering, or you can setup your own platform master on your infrastructure of choice. If you choose to bring your own infrastructure, you can either choose to connect it to the Kontena Cloud for $15/month or not. The pretty web interface is what you give up in that case. Not having delved beyond a few hours of digging around their site, I am not certain the impact that would cause.</li></ul><p>There are still others that you find hints of if you look hard enough: Deis, Mantl, Cloud Foundry, and Amazon ECS to name a few. These guys probably deserve more than this simple, honorable mention.</p><h4>Requirements First</h4><p>Making the choice here is difficult. Of course it depends on your requirements, and so let me list out a few important ones to me:</p><ol><li><strong>Active development: </strong>The container orchestration world is relatively young. Inactive projects will quickly fall behind and signify that bugs are not being addressed. I get the sense that Cattle is on the way out. So I’m scratching it off here.</li><li><strong>No cloud vendor lock-in: </strong>I am not interested in being tied to any single cloud provider at this time. Titus falls out here due to its tight integration with AWS, which is definitely a down side here.</li><li><strong>Simplicity: </strong>The more complex a system, the harder it will be to operate it. This requirement causes me to drop Mesos out of the running, because it is not a container orchestration system first. It tries to be many things to many people, and that feels like a wrong fit.</li><li><strong>CNI Networking: </strong>The ability to have trivial network connectivity between my services is important. I do not want the developers spending time on special purpose code for finding dependent services. Docker Swarm and Kubernetes, you are both still in the running.</li><li><strong>Namespaces with RBAC -</strong> I work in a corporate environment, and one of my goals is to provide development, QA, staging, and production setups that do not collide. I could setup a separate cluster for each, or I could use RBAC and share my compute power. Docker Swarm, I am sorry to see you go, but this is the end of our journey together. I love Hashicorp, but Nomad too puts this functionality behind a paywall.</li></ol><p>There you have it, some pretty high-level requirements that pretty quickly whittle down the playing field. It might not seem fair to drop Mesos out on the “simplicity” category. But if you spend half the time I have investigating all of these options, you will understand that at some point you must simplify your decision making in order to actually start moving forward.</p><p>I am left with the bizarre state of having Kubernetes and Kontena still on the list. Kontena is literally an 11th hour investigation. I almost left it relegated to the list of others. If I had done so, this final hour of authorship would have been less painful. But here it is. A decision has to be made, and while I will eventually circle back around to Kontena, Kubernetes is my current vote.</p><p>I feel guilty leaving so many amazing projects on the cutting room floor. This is what happens in today’s world of amazing options coupled with the age-old need to make a decision.</p><h3>Getting Started With Kubernetes</h3><p>So I have chosen Kubernetes to be my container orchestration system of choice. How do I get a cluster operational for testing and production use? The answers to this question are quite varied as well.</p><h4>Kubernetes Deployment Methods</h4><ul><li><a href=\"https://github.com/kubernetes/minikube\">Minikube</a>: The recommended method to get a single-node Kubernetes running quickly for testing and development purposes. I prefer to see things in full action, so I did not settle for a single node deployment for my tests.</li><li><a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/\">Kubeadm</a>: This is provided by kubernetes.io as a method to deploy a single-master, multi-node cluster. There are additional instructions for setting up a multi-master configuration, too. I have previously used Kubeadm through some Terraform scripting to setup my Digital Ocean testbed clusters.</li><li><a href=\"https://www.docker.com/enterprise-edition\">Docker Enterprise 2.0</a>: As I was working on this article, Docker announced the upgrade to EE 2.0. This new version now incorporates a full Kubernetes deployment built into the product. From a quick reading, they utilize Swarm to bootstrap the cluster and deploy Kubernetes.</li><li><a href=\"https://rancher.com/\">Rancher</a>: “Enterprise Kubernetes Made Easy” is their claim. Indeed, I was able to get a full Kubernetes cluster running on Digital Ocean in under an hour by following their guide. My initial reaction was: “Holy cow! Rancher is Amazing.” It supports managing the Kubernetes deployments into many environments and trivializes the High Availability deployment. It purports to allow management of multiple clusters along with managing other orchestration alternatives including their own Cattle and Apache Mesos.</li><li><a href=\"https://mesosphere.com/\">Mesosphere DC/OS</a>: Possibly coming in as an even heavier weight champion as a container orchestration system in its own right, but now also able to administer Kubernetes clusters as well. This product appears quite compelling… Except that the really good stuff is under the <a href=\"https://mesosphere.com/pricing/\">Enterprise pay wall</a>. I am also unclear from their website if the DC/OS version is free and the DC/OS Enterprise version is paid (or if they are both paid). Anytime I see a “Contact us for pricing,” I tend to move on. This will keep me from looking too closely — apologies to anyone I offended.</li><li><a href=\"https://pharos.sh/\">Kontena’s Pharos</a> - It seems that even companies who have their own complete alternative to Kubernetes cannot keep their hands out of the Kubernetes deployment software initiatives. Their “<a href=\"https://pharos.sh/docs/usage/terraform.html\">Usage with Terraform</a>” documentation looks to have a lot of power in making your Kubernetes installation a distinct, composable step. You can setup your infrastructure in one step using whatever tool you have for that and then setup Kubernetes on top of that. setup-infrastructure | install-kubernetes &gt; profit</li></ul><p>The list goes on: Pivitol’s Kubo, Apprenda Kismatic, CoreOS Tectonic, RedHat Openshift v3, Openshift Origin, and certainly more.</p><h4>Hosted Options</h4><ul><li><a href=\"https://aws.amazon.com/eks/\">Amazon EKS</a> - Elastic Container Service for Kubernetes — An Amazon hosted Kubernetes cluster. This is currently an “In Preview” technology by Amazon. This speaks towards the viability and future of Kubernetes…</li><li><a href=\"https://www.openshift.com/\">OpenShift</a> - Red Hat’s online container service.</li></ul><h4>My Kubernetes Deployment Choice?</h4><p>For deployment of Kubernetes, I plan on continuing to work with both Kubeadm (possibly replacing that with Pharos) as well as Rancher.</p><p>Rancher showed great promise the first time I used it. The only downside is that I must first have a control machine onto which I install Rancher, but that is a small price to pay. I am not certain that I will want to use the Rancher interface for interacting with my Kubernetes cluster, and so long as it does not get in the way of me using kubectl to control the cluster, we can get along just fine.</p><h3>What is Next?</h3><p>Now that I have gone through the exercise to understand the world of options, I am ready to go head down and experiment with Kubernetes. There is a lot of exploration I need to do with my deployment methods of choice.</p><p>I also talked before about Istio which lays on top of Kubernetes to provide even more foundation to support microservice communication and monitoring. Expect more of that in upcoming articles. Oh, and now that I tripped over Kontena, I feel pulled to give it a trial run through. 😉</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=41844021c241\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/how-to-choose-the-right-container-orchestration-and-how-to-deploy-it-41844021c241\">How to choose the right container orchestration and how to deploy it</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Michael Douglass",
      "guid": "https://medium.com/p/41844021c241",
      "categories": [
        "tech",
        "programming",
        "docker",
        "kubernetes",
        "microservices"
      ],
      "isoDate": "2018-05-01T17:21:03.000Z"
    },
    {
      "creator": "Cory House",
      "title": "How to handle environment-specific settings in your JavaScript apps",
      "link": "https://medium.freecodecamp.org/environment-settings-in-javascript-apps-c5f9744282b6?source=rss----336d898217ee---4",
      "pubDate": "Tue, 03 Apr 2018 23:56:52 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sS6KcsjhHDEI1T0ka164Wg.jpeg\" /><figcaption>Modern web apps have gotten…complicated.</figcaption></figure><p>Today many web apps are built using React, Angular, Vue, Ember, and others. These modern client-side rendered apps often call web APIs that are hosted on separate servers. This creates a problem: how do you configure your app to call the right API URL in each environment?</p><p>For example, during development, you may host the API locally at localhost:3000. In production, the API may be be hosted on some other server at api.mycompany.com. So you need your app to call localhost:3000 in development and api.mycompany.com in production. But how?</p><p>And the base URL is just one example of settings that may change per environment. You might choose to tweak other settings per environment for performance, security, or logging purposes. Some of the approaches below are applicable for these general environment-specific configurations as well. But for simplicity<strong>,</strong> this post focuses on techniques for configuring base URLs per environment.</p><p>I posted a poll on Twitter with a couple options:</p><style>body[data-twttr-rendered=\"true\"] {background-color: transparent;}.twitter-tweet {margin: auto !important;}</style><blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\"><p>📊Poll: How do you configure your client-side rendered apps to call different API URLs in each environment? Example: Dev api runs on localhost:3002 Prod api is at <a rel=\"nofollow\" href=\"https://t.co/8ZSpUMQi4m\">https://t.co/8ZSpUMQi4m</a></p><p>&#x200a;&mdash;&#x200a;<a href=\"https://twitter.com/housecor/status/973881714710908928\">@housecor</a></p></blockquote><script src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><script>function notifyResize(height) {height = height ? height : document.documentElement.offsetHeight; var resized = false; if (window.donkey && donkey.resize) {donkey.resize(height); resized = true;}if (parent && parent._resizeIframe) {var obj = {iframe: window.frameElement, height: height}; parent._resizeIframe(obj); resized = true;}if (window.location && window.location.hash === \"#amp=1\" && window.parent && window.parent.postMessage) {window.parent.postMessage({sentinel: \"amp\", type: \"embed-size\", height: height}, \"*\");}if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.resize) {window.webkit.messageHandlers.resize.postMessage(height); resized = true;}return resized;}twttr.events.bind('rendered', function (event) {notifyResize();}); twttr.events.bind('resize', function (event) {notifyResize();});</script><script>if (parent && parent._resizeIframe) {var maxWidth = parseInt(window.frameElement.getAttribute(\"width\")); if ( 500  < maxWidth) {window.frameElement.setAttribute(\"width\", \"500\");}}</script><p>Turns out, there are many ways to handle this. I received many insightful replies in the tweet thread. I’ve summarized eight options below. I’ve ordered these options (loosely) in the order that they should be considered. So, if you’re in a hurry, the options to consider first are at the top. 😀</p><h3>Option 1: Host the API with the app</h3><p>Simple. Just host the app and API from the same webserver, so relative URLs work everywhere. This avoids both the base URL issue as well as cross-origin problems.</p><h4><strong>When to consider it</strong>:</h4><ul><li>Your API is consumed by a single app.</li><li>You don’t need to scale your API and app separately, so hosting on the same server is practical.</li></ul><h3>Option 2: Environment-Specific Build</h3><p>This approach honors the compile-time maxim:</p><blockquote>“Never do at runtime what you can handle at compile time.”</blockquote><p>With this approach, you typically use a continuous integration (CI) server to generate and deploy custom builds for each environment. This is a powerful, secure, and versatile approach, but it requires each developer to create and maintain a .env file on their machine. <a href=\"https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f\">Here’s a great post with some tricks for making this pretty painless</a>.</p><h4><strong>When to consider it:</strong></h4><ul><li>You’re comfortable configuring a CI server to automate the build and deployment process to assure reliability.</li><li>You want to significantly alter the code deployed to production, such as removing code that is only used in non-production environments for performance or security reasons.</li><li>You’re comfortable with the risk that comes along with deploying different code to production than the code you ran during development and QA.</li></ul><h3>Option 3: Runtime Configuration</h3><p>With this approach, you configure your app for each environment by referencing the relevant configuration data upon startup (as opposed to upon build as discussed above). So <strong>unlike the approach above, with this approach the same code is deployed to all environments</strong>. The configuration data you pass in on startup customizes the app’s behavior.</p><p>There are a couple potential ways to pass environment configuration data in:</p><ol><li><strong>Command line config</strong> — Pass the config in when starting the app.</li><li><strong>Environment config file</strong> — Populate a .env file in each environment and read from it upon startup. <a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-custom-environment-variables\">Here’s an example from the create-react-app docs</a>, but the approach applies to any JavaScript app.</li></ol><p>But how does your app get this info? There are a couple ways to do that, too:</p><ol><li><strong>Config file</strong> — Write the config data to a separate JavaScript file on app startup. Your app can import and read this file on startup.</li><li><strong>Global in index.html </strong>— Write the config data to a global in index.html using your build tool. Again, <a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#injecting-data-from-the-server-into-the-page\">here’s an example from the create-react-app docs</a>, but the approach applies to any JavaScript app.</li></ol><p>Admittedly, these approaches slightly change your code on startup based on the runtime configuration provided. But they’re different than option #2 above, because the same code is deployed to all environments.</p><h4><strong>When to consider it:</strong></h4><ul><li>You prefer to deploy the same code to all environments.</li></ul><h3>Option 4: Reverse Proxy</h3><p>With this approach, you call the same relative URL in all environments. How does that work? Well, it’s the front-end web server’s responsibility to forward calls to the relevant API for each environment. There are multiple benefits to this approach:</p><ol><li>Your URLs in all your API calls are clean, relative URLs. For example /user.</li><li>You can configure your front-end web server as a caching layer for added performance.</li><li>This approach supports switching back-end systems by simply re-configuring the proxy.</li></ol><style>body[data-twttr-rendered=\"true\"] {background-color: transparent;}.twitter-tweet {margin: auto !important;}</style><blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\"><p><a href=\"http://twitter.com/housecor\" target=\"_blank\" title=\"Twitter profile for @housecor\">@housecor</a> I always use relative /api path. Then let the web servers reverse proxy that wherever it needs to point to. No code changes or conditional logic required.</p><p>&#x200a;&mdash;&#x200a;<a href=\"https://twitter.com/_ericelliott/status/973970277670436864\">@_ericelliott</a></p></blockquote><script src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><script>function notifyResize(height) {height = height ? height : document.documentElement.offsetHeight; var resized = false; if (window.donkey && donkey.resize) {donkey.resize(height); resized = true;}if (parent && parent._resizeIframe) {var obj = {iframe: window.frameElement, height: height}; parent._resizeIframe(obj); resized = true;}if (window.location && window.location.hash === \"#amp=1\" && window.parent && window.parent.postMessage) {window.parent.postMessage({sentinel: \"amp\", type: \"embed-size\", height: height}, \"*\");}if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.resize) {window.webkit.messageHandlers.resize.postMessage(height); resized = true;}return resized;}twttr.events.bind('rendered', function (event) {notifyResize();}); twttr.events.bind('resize', function (event) {notifyResize();});</script><script>if (parent && parent._resizeIframe) {var maxWidth = parseInt(window.frameElement.getAttribute(\"width\")); if ( 500  < maxWidth) {window.frameElement.setAttribute(\"width\", \"500\");}}</script><h4><strong>When to consider it:</strong></h4><ul><li>You have the ability to configure the web server in all environments</li><li>You’re interested in implementing a caching layer between your UI and your API.</li><li>Your front-end web server can forward calls to your API server reliably and quickly. There is a performance cost to this approach, since your web server must pass requests on to another server.</li></ul><h4><strong>Side note</strong>:</h4><p>While we’re talking about proxies, another proxy approach worth mentioning is proxy middleware (this is a totally different approach than the reverse proxy discussed above).</p><p>With proxy middleware running on your local machine, requests are forwarded to a specified URL during development. For instance, if you’re a React developer, <a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development\">create-react-app has proxy support built in</a>. It uses Webpack’s proxy middleware.</p><p>Here’s a <a href=\"https://medium.freecodecamp.org/how-to-make-create-react-app-work-with-a-node-backend-api-7c5c48acb1b0\">solid overview of the proxy approach</a> using React and Express.</p><p><strong>However</strong>: Proxy middleware only solves the base URL problem in development. So use one of the other techniques in this post to handle other environments such as QA and production.</p><h3>Option 5: Docker</h3><p>With Docker you can deploy the UI and API as separate containers, but create a “LAN” that allows the containers to communicate as though they’re on the same network. This way, the base URLs don’t change in each environment. The containers run identically in all environments. And you can pass relevant environment variables into the containers in each environment. Look into Kubernetes or Docker Swarm for this approach.</p><h4><strong>When to consider it:</strong></h4><ul><li>You’re already invested in the Docker ecosystem.</li></ul><h3>Option 6: Environment Sniffing</h3><p>With this approach, you use code to “sniff” 👃🏻 the current environment, typically by looking at the URL. For example, if the URL is http://localhost, you know you’re in development.</p><p>The benefit of this approach is simplicity. Developers don’t need to configure anything on their machine and you don’t need to monkey with CI server or web server configurations either.</p><h4><strong>When to consider it</strong>:</h4><ul><li>You have a simple app that calls a small number of APIs.</li><li>You don’t have a CI-server.</li><li>Your company politics make it painful or impractical to implement the other options above.</li><li>You’re not concerned about people potentially finding the URLs to your non-production environment. (For security, your non-production environment shouldn’t be accessible outside your corporate LAN/VPN anyway).</li></ul><h3>Option 7: Custom HTTP header</h3><p>Configure the front-end web server to provide a custom HTTP header that contains the relevant client URL for the environment. The downside of this approach is your app has to make an HTTP call to this API first to determine what the relevant base URLs are for all environments.</p><h4><strong>When to consider it:</strong></h4><ul><li>I don’t recommend this approach, since it requires your app to make a round trip HTTP call before it can actually begin fetching data. I prefer one of the other approaches above.</li></ul><h3>Option 8: App Config Endpoint</h3><p>With this approach, your app calls the same “app config” API at the same URL, for all environments. Your app calls this API first. The API call returns the relevant base URL in each environment (as well as potentially including other environment-specific settings). With this approach, you can potentially pass along with other relevant environment-specific config data.</p><h4><strong>When to consider it</strong>:</h4><ul><li>I don’t recommend this approach either. It impacts load time, because the initial HTTP call to retrieve config data must complete before the app can actually get started retrieving desired data. Consider one of the other options above instead.</li></ul><h3>Summary</h3><p>Create a build per environment via a CI server if you need true per-environment customization (#2 above). If you prefer deploying the same code to each environment, consider runtime configuration (#3 above) or a reverse proxy (#4 above).</p><p>Happy coding! ⌨️</p><p>Have other ways you handle this? Please chime in via the comments.</p><p><a href=\"https://twitter.com/housecor\">Cory House</a> is the author of <a href=\"http://pluralsight.com/author/cory-house\">multiple courses on JavaScript, React, clean code, .NET, and more on Pluralsight</a>. He is principal consultant at <a href=\"http://www.reactjsconsulting.com\">reactjsconsulting.com</a>, a Software Architect, Microsoft MVP, and trains software developers internationally on front-end development practices. Cory tweets about JavaScript and front-end development on Twitter as <a href=\"http://www.twitter.com/housecor\">@housecor</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c5f9744282b6\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/environment-settings-in-javascript-apps-c5f9744282b6\">How to handle environment-specific settings in your JavaScript apps</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Cory House",
      "guid": "https://medium.com/p/c5f9744282b6",
      "categories": [
        "javascript",
        "startup",
        "technology",
        "programming",
        "web-development"
      ],
      "isoDate": "2018-04-03T23:56:52.000Z"
    },
    {
      "creator": "Hassan Djirdeh",
      "title": "An introduction to dynamic list rendering in Vue.js",
      "link": "https://medium.freecodecamp.org/an-introduction-to-dynamic-list-rendering-in-vue-js-a70eea3e321?source=rss----336d898217ee---4",
      "pubDate": "Tue, 01 May 2018 15:32:32 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*smV1EYFRTT4wGha020XFIA.png\" /></figure><p>List rendering is one of the most commonly used practices in front-end web development. Dynamic list rendering is often used to present a series of similarly grouped information in a concise and friendly format to the user. In almost every web application we use, we can see <strong>lists</strong> of content in numerous areas of the app.</p><p>In this article we’ll gather an understanding of Vue’s v-for directive in generating dynamic lists. We’ll also go through some examples of why the key attribute should be used when doing so.</p><p>Since we’ll be explaining things thoroughly as we start to write code, this article assumes you’ll have no or very little knowledge with Vue (and/or other JavaScript frameworks).</p><h3>Case Study: Twitter</h3><p>We’re going to use <a href=\"https://twitter.com/\">Twitter</a> as the case study for this article.</p><p>When logged in and in the main index route of Twitter, we’re presented with a view similar to this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*yAgKZT2NuFjBWWbC.png\" /></figure><p>On the homepage, we’ve become accustomed to seeing a list of trends, a list of tweets, a list of potential followers, and so on. The content displayed in these lists depends on a multitude of factors — our Twitter history, whom we follow, our likes, and so on. As a result, we can say all this data is <strong>dynamic</strong>.</p><p>Though this data is dynamically obtained, the <strong>way</strong> this data is shown remains the same. This is in part due to using <strong>reusable web components</strong>.</p><p>For example, we can see the list of tweets as a list of single tweet-component items. We can think of tweet-component as a shell that takes data of sorts, such as the username, handle, tweet, and avatar, among other pieces, and simply displays those pieces in a consistent markup.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BdB3OeyWDWHuMNiN.png\" /></figure><p>Let’s say we wanted to render a list of components (like a list of tweet-component items) based on a large data source obtained from a server. In Vue, the first thing that should come to mind to accomplish this is the <strong>v-for</strong> directive.</p><h3>The v-for directive</h3><p>The v-for directive is used to render a list of items based on a data source. The directive can be used on a template element and requires a specific syntax along the lines of:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Z1iUt5OO46Ari1uK.png\" /></figure><p>Let’s see an example of this in practice. First, we’ll assume we’ve already obtained a collection of tweet data:</p><pre>const tweets = [<br>  {<br>    id: 1,<br>    name: &#39;James&#39;,<br>    handle: &#39;<a href=\"http://twitter.com/jokerjames\">@jokerjames</a>&#39;,<br>    img: &#39;<a href=\"https://semantic-ui.com/images/avatar2/large/matthew.png&#39;\">https://semantic-ui.com/images/avatar2/large/matthew.png&#39;</a>,<br>    tweet: &quot;If you don&#39;t succeed, dust yourself off and try again.&quot;,<br>    likes: 10,<br>  },<br>  { <br>    id: 2,<br>    name: &#39;Fatima&#39;,<br>    handle: &#39;<a href=\"http://twitter.com/fantasticfatima\">@fantasticfatima</a>&#39;,<br>    img: &#39;<a href=\"https://semantic-ui.com/images/avatar2/large/molly.png&#39;\">https://semantic-ui.com/images/avatar2/large/molly.png&#39;</a>,<br>    tweet: &#39;Better late than never but never late is better.&#39;,<br>    likes: 12,<br>  },<br>  {<br>    id: 3,<br>    name: &#39;Xin&#39;,<br>    handle: &#39;<a href=\"http://twitter.com/xeroxin\">@xeroxin</a>&#39;,<br>    img: &#39;<a href=\"https://semantic-ui.com/images/avatar2/large/elyse.png&#39;\">https://semantic-ui.com/images/avatar2/large/elyse.png&#39;</a>,<br>    tweet: &#39;Beauty in the struggle, ugliness in the success.&#39;,<br>    likes: 18,<br>  }<br>]</pre><p>tweets is a collection of tweet objects with each tweet containing details of that particular tweet—a unique identifier, the name/handle of the account, tweet message, and so on. Let’s now attempt to use the v-for directive to render a list of tweet components based on this data.</p><p>First and foremost, we’ll create the Vue instance — the heart of the Vue application. We’ll mount/attach our instance to a DOM element of id appand assign the tweets collection as part of the instance’s data object.</p><pre>new Vue({<br>  el: &#39;#app&#39;,<br>  data: {<br>    tweets<br>  }<br>});</pre><p>We’ll now go ahead and create a tweet-component that our v-fordirective will use to render a list. We’ll use the global Vue.componentconstructor to create a component named tweet-component:</p><pre>Vue.component(&#39;tweet-component&#39;, {<br>  template: `  <br>    &lt;div class=&quot;tweet&quot;&gt;<br>      &lt;div class=&quot;box&quot;&gt;<br>        &lt;article class=&quot;media&quot;&gt;<br>          &lt;div class=&quot;media-left&quot;&gt;<br>            &lt;figure class=&quot;image is-64x64&quot;&gt;<br>              &lt;img :src=&quot;tweet.img&quot; alt=&quot;Image&quot;&gt;<br>            &lt;/figure&gt;<br>          &lt;/div&gt;<br>          &lt;div class=&quot;media-content&quot;&gt;<br>            &lt;div class=&quot;content&quot;&gt;<br>              &lt;p&gt;<br>                &lt;strong&gt;{{tweet.name}}&lt;/strong&gt; &lt;small&gt;{{tweet.handle}}&lt;/small&gt;<br>                &lt;br&gt;<br>                {{tweet.tweet}}<br>              &lt;/p&gt;<br>            &lt;/div&gt;<br>              &lt;div class=&quot;level-left&quot;&gt;<br>                &lt;a class=&quot;level-item&quot;&gt;<br>                  &lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-heart&quot;&gt;&lt;/i&gt;&lt;/span&gt;<br>                  &lt;span class=&quot;likes&quot;&gt;{{tweet.likes}}&lt;/span&gt;<br>                &lt;/a&gt;<br>              &lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/article&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;  <br>  `,<br>  props: {<br>    tweet: Object<br>  }<br>});</pre><p>A few interesting things to note here:</p><ol><li>The tweet-component expects a tweet object prop as seen in the prop validation requirement (props: {tweet: Object}). If the component is rendered with a tweet prop that is <strong>not an object</strong>, Vue will emit warnings.</li><li>We’re binding the properties of the tweet object prop on to the component template with the help of the Mustache syntax: {{ }}.</li><li>The component markup adapts <a href=\"https://bulma.io/documentation/elements/box/\">Bulma’s Box element</a> as it represents a good resemblance to a tweet.</li></ol><p>In the HTML template, we’ll need to create the markup where our Vue app will be mounted (i.e. the element with the id of app). Within this markup, we’ll use the v-for directive to render a list of tweets.</p><p>Since tweets is the data collection we’ll be iterating over, tweet will be an appropriate alias to use in the directive. In each rendered tweet-component, we’ll <strong>also</strong><em> </em>pass in the iterated tweet object as props for it to be accessed in the component.</p><pre>&lt;div id=&quot;app&quot; class=&quot;columns&quot;&gt;<br>  &lt;div class=&quot;column&quot;&gt;<br>    &lt;tweet-component v-for=&quot;tweet in tweets&quot; :tweet=&quot;tweet&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>Regardless of <strong>how</strong> many more tweet objects would be introduced to the collection, or how they’ll change over time — our set up will always render all the tweets in the collection in the same markup we expect.</p><p>With the help of some custom CSS, our app will look something like this:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2Fitslit%2Fembed%2Fpreview%2FxWjZKy%3Fheight%3D600%26slug-hash%3DxWjZKy%26default-tabs%3Djs%2Cresult%26host%3Dhttps%3A%2F%2Fcodepen.io%26embed-version%3D2&amp;url=https%3A%2F%2Fcodepen.io%2Fitslit%2Fpen%2FxWjZKy&amp;image=https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fi.cdpn.io%2F1211695.xWjZKy.small.c98d8226-e4e3-447a-8dcd-c193ab10d008.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codepen\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/201d1fdbcb4e30861f5837c87525fcfb/href\">https://medium.com/media/201d1fdbcb4e30861f5837c87525fcfb/href</a></iframe><p>Though everything works as expected, we may be prompted with a Vue tip in our browser console:</p><pre>[Vue tip]: &lt;tweet-component v-for=&quot;tweet in tweets&quot;&gt;: component lists rendered with v-for should have explicit keys...</pre><p><strong>Note:</strong> You may not be able to see the warning in the browser console when running the code through CodePen.</p><p>Why is Vue telling us to specify explicit keys in our list when everything works as expected?</p><h3>The key attribute</h3><p>It’s common practice to specify a key attribute for every iterated element within a rendered v-for list. This is because Vue uses the key attribute to create <strong>unique bindings for each node’s identity</strong>.</p><p>Let’s explain this some more — if there were any dynamic UI changes to our list (for example, order of list items gets shuffled), Vue will opt towards changing data within each element <strong>instead</strong> of moving the DOM elements accordingly. This won’t be an issue in most cases. However, in certain instances where our v-for list depends on DOM state and/or child component state, this can cause some unintended behavior.</p><p>Let’s see an example of this. What if our simple tweet component now contained an input field that will allow the user to directly respond to the tweet message? We’ll ignore how this response could be submitted and simply address the new input field itself:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X3dVBOFq76PJQFGC.png\" /></figure><p>We’ll include this new input field on to the template of tweet-component:</p><pre>Vue.component(&#39;tweet-component&#39;, {<br>  template: `<br>    &lt;div class=&quot;tweet&quot;&gt;<br>      &lt;div class=&quot;box&quot;&gt;<br>        // ...<br>      &lt;/div&gt;<br><strong>      &lt;div class=&quot;control has-icons-left has-icons-right&quot;&gt;<br>        &lt;input class=&quot;input is-small&quot; placeholder=&quot;Tweet your reply...&quot; /&gt;<br>        &lt;span class=&quot;icon is-small is-left&quot;&gt;<br>          &lt;i class=&quot;fas fa-envelope&quot;&gt;&lt;/i&gt;<br>        &lt;/span&gt;<br>      &lt;/div&gt;</strong><br>    &lt;/div&gt;<br>  `,<br>  props: {<br>    tweet: Object<br>  }<br>});</pre><p>Assume we wanted to introduce another new feature into our app. This feature would involve allowing the user to shuffle a list of tweets randomly.</p><p>To do this, we can first include a “Shuffle!” button in our HTML template:</p><pre>&lt;div id=&quot;app&quot; class=&quot;columns&quot;&gt;<br>  &lt;div class=&quot;column&quot;&gt;<br><strong>    &lt;button class=&quot;is-primary button&quot; @click=&quot;shuffle&quot;&gt;<br>      Shuffle!<br>    &lt;/button&gt;</strong><br>    &lt;tweet-component v-for=&quot;tweet in tweets&quot; :tweet=&quot;tweet&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>We’ve attached a click event listener on the button element to call a shuffle method when triggered. In our Vue instance, we’ll create the shuffle method responsible for randomly shuffling the tweets collection in the instance. We’ll use lodash’s <a href=\"https://lodash.com/docs/4.17.5#shuffle\">_shuffle</a> method to achieve this:</p><pre>new Vue({<br>  el: &#39;#app&#39;,<br>  data: {<br>    tweets<br>  },<br><strong>  methods: {<br>    shuffle() {<br>      this.tweets = _.shuffle(this.tweets)<br>    }<br>  }</strong><br>});</pre><p>Let’s try it out! If we click shuffle a few times, we’ll notice our tweet elements get randomly assorted with each click.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2Fitslit%2Fembed%2Fpreview%2FLdmGmP%3Fheight%3D600%26slug-hash%3DLdmGmP%26default-tabs%3Djs%2Cresult%26host%3Dhttps%3A%2F%2Fcodepen.io%26embed-version%3D2&amp;url=https%3A%2F%2Fcodepen.io%2Fitslit%2Fpen%2FLdmGmP&amp;image=https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fi.cdpn.io%2F1211695.LdmGmP.small.b1adb0f8-2930-4237-afe1-3412943b89f9.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codepen\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e2937e0e8c2f0bd651a3a5543705151d/href\">https://medium.com/media/e2937e0e8c2f0bd651a3a5543705151d/href</a></iframe><p>However, if we type some information in the input of each component and <strong>then</strong> click shuffle, we’ll notice something peculiar happening:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1PN7mevBsMNhS03dt6-7qA.gif\" /></figure><p>Since we haven’t opted to use the <strong>key</strong> attribute, Vue has not created unique bindings to each tweet node. As a result, when we’re aiming to reorder the tweets, Vue takes the more performant saving approach to simply <strong>change</strong><em> </em><strong>(or patch)</strong> data in each element. Since the temporary DOM state (that is, the inputted text) remains in place, we experience this unintended mismatch.</p><p>Here’s a diagram that shows us the data that gets patched on to each element and the DOM state that remains in place:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IKwgNEwHYMwzRq8nOiBjog.png\" /></figure><p>To avoid this; we’ll have to assign a unique <strong>key</strong> to every tweet-componentrendered in the list.</p><p>We’ll use the id of a tweet to be the unique identifier since we should safely say a tweet’s id shouldn’t be equal to that of another. Because we’re using dynamic values, we’ll use the v-bind directive to bind our key to the tweet.id:</p><pre>&lt;div id=&quot;app&quot; class=&quot;columns&quot;&gt;<br>  &lt;div class=&quot;column&quot;&gt;<br>    &lt;button class=&quot;is-primary button&quot; @click=&quot;shuffle&quot;&gt;<br>      Shuffle!<br>    &lt;/button&gt;<br>    &lt;tweet-component<br>      v-for=&quot;tweet in tweets&quot;<br>      :tweet=&quot;tweet&quot;<br>      <strong>:key=&quot;tweet.id&quot;</strong><br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>Now, Vue recognizes each tweet’s node identity, so it’ll <strong>reorder</strong><em> </em>the components when we intend on shuffling the list.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GXx_K3xLDHF8PZRTILoW_Q.gif\" /></figure><h3>Transitions</h3><p>Since each tweet component is now being moved accordingly, we can take this a step further and use Vue’s transition-group to <strong>show</strong> how the elements are being reordered.</p><p>To do this, we’ll add the <a href=\"https://vuejs.org/v2/guide/transitions.html#List-Transitions\">transition-group</a> element as a wrapper to the v-for list. We&#39;ll specify a transition name of tweets and declare that the transition group should be rendered as a div element.</p><pre>&lt;div id=&quot;app&quot; class=&quot;columns&quot;&gt;<br>  &lt;div class=&quot;column&quot;&gt;<br>    &lt;button class=&quot;is-primary button&quot; @click=&quot;shuffle&quot;&gt;<br>      Shuffle!<br>    &lt;/button&gt;<br>    <strong>&lt;transition-group name=&quot;tweets&quot; tag=&quot;div&quot;&gt;</strong><br>      &lt;tweet-component<br>         v-for=&quot;tweet in tweets&quot;<br>         :tweet=&quot;tweet&quot;<br>         :key=&quot;tweet.id&quot;<br>      /&gt;<br>    <strong>&lt;/transition-group&gt;</strong><br>  &lt;/div&gt;<br>&lt;/div&gt;</pre><p>Based on the name of the transition, Vue will automatically recognize if any CSS transitions/animations have been specified. Since we aim to invoke a transition for the <strong>movement</strong> of items in the list, Vue will look for a specified CSS transition along the lines of tweets-move (where tweets is the name given to our transition group).</p><p>As a result, we&#39;ll manually introduce a .tweets-move class that has a specified type and time of transition:</p><pre>#app .tweets-move {<br>  transition: transform 1s;<br>}</pre><p><strong>Note:</strong> This is a very brief look into applying list transitions. Be sure to check out the <a href=\"https://vuejs.org/v2/guide/transitions.html\">Vue docs</a> for detailed information on all the different types of transitions that can be applied!</p><p>Our tweet-component elements will now <strong>transition</strong> appropriately between locations when a shuffle is invoked. Give it a try! Type some information in the input fields and click “Shuffle!” a few times.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2Fitslit%2Fembed%2Fpreview%2FLdObqa%3Fheight%3D600%26slug-hash%3DLdObqa%26default-tabs%3Djs%2Cresult%26host%3Dhttps%3A%2F%2Fcodepen.io%26embed-version%3D2&amp;url=https%3A%2F%2Fcodepen.io%2Fitslit%2Fpen%2FLdObqa&amp;image=https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fi.cdpn.io%2F1211695.LdObqa.small.a7ce3a5d-90da-4b3d-a52b-66b4029a63f8.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codepen\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/874efc277fcc8c0a91ce85a7e911c510/href\">https://medium.com/media/874efc277fcc8c0a91ce85a7e911c510/href</a></iframe><p>Pretty cool, right? Without the key attribute, <strong>the transition-group element can’t be used to create list transitions</strong> since the elements are <strong>patched in place </strong>instead of being reordered.</p><p>Should the key attribute always be used? <strong>It’s recommended</strong>. The <a href=\"https://vuejs.org/v2/guide/list.html#key\">Vue docs</a> specify that the key attribute should only be omitted if:</p><ul><li>We intentionally want the default manner of patching elements in place for performance reasons.</li><li>The DOM content is simple enough.</li></ul><h3>Conclusion</h3><p>And there we have it! Hopefully this short article portrayed how useful the v-for directive is as well as provided a little more context to why the key attribute is often used. Let me know if you may have any questions/thoughts whatsoever!</p><p>If you liked my style of writing and are potentially interested in learning how to build real world apps with Vue, you may like the book <strong>Fullstack Vue: The Complete Guide to Vue.js</strong> that I helped publish! The book covers numerous facets of Vue including routing, simple state management, form handling, Vuex, server persistence, and testing, among other topics. If you’re interested and/or would like to try a sample chapter, you can get more information from our website <a href=\"https://www.fullstack.io/vue/\"><strong>https://fullstack.io/vue</strong></a><strong>!</strong></p><p>If you have any questions/thoughts/opinions, you’re more than welcome to reach out to me anytime <a href=\"https://twitter.com/djirdehh\">@djirdehh</a>!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a70eea3e321\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/an-introduction-to-dynamic-list-rendering-in-vue-js-a70eea3e321\">An introduction to dynamic list rendering in Vue.js</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Hassan Djirdeh",
      "guid": "https://medium.com/p/a70eea3e321",
      "categories": [
        "web-development",
        "technology",
        "vuejs",
        "programming",
        "javascript"
      ],
      "isoDate": "2018-05-01T15:32:32.000Z"
    },
    {
      "creator": "Linea Brink Andersen",
      "title": "How I crushed my fear of open source and started my own project — and how you can, too.",
      "link": "https://medium.freecodecamp.org/how-i-crushed-my-fear-of-open-source-and-started-my-own-project-and-how-you-can-too-ddcfed041a2f?source=rss----336d898217ee---4",
      "pubDate": "Tue, 01 May 2018 15:03:30 GMT",
      "content:encoded": "<p>A week ago, I started an Open Source project. I had never done a pull request or merged anything on GitHub. Suddenly I was an Open Source maintainer.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oRTSo7V_0sXvX_ZYijbvoQ.jpeg\" /><figcaption>In my search for an easily approachable Open Source project, I ended up creating my own.</figcaption></figure><p>I had always wanted to contribute to Open Source. Every time I was looking for a project, I gave up. I was overwhelmed by the source code of a project, or it looked too complicated. I didn’t know whom to reach out to for information and help. I was doubting my skills, and convinced myself that my contributions wouldn’t be useful.</p><p>It was ironic. I wanted to contribute to Open Source, to gain experience. But I felt that I needed more experience before I could start. It was an endless spiral, and I realized I needed to do something about it.</p><h3>Breaking through the barrier</h3><p>I wanted an Open Source project for beginners. I dreamed of a project where I could feel confident. Where other contributors were also learning to code, or contributed to help beginners. I figured out that there were probably other people like me looking for the same opportunity.</p><p>Then, it finally hit me. I could start an open source project myself. I spent 14 hours on it that day, and in the early morning I had a project on Github. Then I tweeted out for others to join me.</p><p>If you have been curious about open source for a while, but haven’t gotten started, I encourage you to do the same. I have captured my process in this post. If you create the type of project you would feel good about contributing to, it will be much easier to get started. As an added bonus, you will help other people who have been hesitant to contribute for the same reasons as you. Try it out — you will learn a lot.</p><p><strong>Side note:</strong> I said above I started my project in 14 hours. To be completely fair, I started on step 3 (see below) that day. I already had my idea, and I had written my baseline code a couple of weeks before. If you have some small project you have already started, you can use that. But if not, no worries, you do not need to do it in one day.</p><p>So without further ado, here are my five steps to create your own Open Source project.</p><h3><strong>Step 1 - Get an idea</strong></h3><p>This might sound very hard, but it doesn’t have to be. After all, you only need the beginning of an idea. Your future contributors and potential users will be full of ideas to build on top of yours.</p><p>A lot of technologies like Google and YouTube started out <a href=\"https://blog.bufferapp.com/the-humble-beginnings-of-google-tumblr-youtube-and-more-and-what-they-can-teach-us-about-starting-small\">very simple</a>, and so should your project. Remind yourself that this is a learning experience. Your idea doesn’t have to feel like a genius invention. If you’re still stuck, maybe <a href=\"https://appideagenerator.com\">this silly site</a> can help you.</p><h3><strong>Step 2 - Create a baseline</strong></h3><p>It is easier to start collaborating if there is some minimal code to start from. It is up to you to decide how much code your project should include to begin with. But it will be easier for your contributors to begin if there are at least a few lines of code that they can modify or add to.</p><p>Don’t worry if your baseline seems too simple. This is exactly what you want. Other beginners will be able to contribute, because the project is simple and the code is easy to read.</p><h3><strong>Step 3 - Set up your repository</strong></h3><p>The repository is where it all happens. It is also where we beginners lack a bit of experience, compared to seasoned developers. Use your experience as an Open Source “newbie” to create a simple and encouraging project that other beginners can join.</p><p>You know exactly what was hard for you. Make sure that your project makes it easier. Create the type of project you wish you could have joined yourself.</p><p>When I was looking to join an Open Source project, I really wanted to ask the maintainers how I could contribute. I made sure that there was plenty of ways for people looking at my repository to reach out to me. I provided information on how to open an issue and introduce yourself. If someone does that, we can figure out together how they can start contributing.</p><p>There are people out there who have the same struggles as you. If you build your version of a welcoming open source project, they will have an easier time joining you. Together, you can learn and develop your project.</p><p>There are many guides on how to start a GitHub repository, for example <a href=\"https://guides.github.com/activities/hello-world/\">here</a>. Learning by doing is what works best for me.</p><p>I followed free interactive guides on <a href=\"https://lab.github.com/\">GitHub learning lab</a>. If you are new to Github or want to brush up, you can start with an “<a href=\"https://lab.github.com/courses/introduction-to-github\">Introduction to Github</a>” as I did.</p><p>Then move on to “<a href=\"https://lab.github.com/courses/moving-your-project-to-github\">Moving your project to Github</a>”. This guide will walk you through setting up an Open Source repository step by step. Feel free to skip any step that you don’t think is relevant to your project, or that you want to save for later. When you finish, you can change the name of your repository, make it public, and voila! You have an open source project.</p><p>Remember that open source doesn’t just mean a collaborative project. It also means having an open source license. The GitHub guide will help you in adding that to your repository, too.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dv8IDir9fhMHjpC8ajtZ0g.jpeg\" /><figcaption>If you build a welcoming Open Source project, people will join you. Hold each other’s hand as you learn together.</figcaption></figure><h3><strong>Step 4 - Invite people to collaborate with you</strong></h3><p>This was the step that scared me the most. I didn’t have any friends who were coding that I could invite to join my project. I had less than 20 followers on Twitter, so I wasn’t even sure my tweets would have much reach. But I tweeted out an invitation to join, and added some hashtags that I hoped would reach other beginners.</p><p>And then, <strong>Nothing Happened!</strong></p><p>For more than 24 hours, no one liked my tweet. The only retweet was from a twitter bot. Worst of all, nobody was active on the repository. I was disappointed. My expectations weren’t high, but I had hoped that at least one or two people would check it out.</p><p>But the following morning, there had been some twitter activity. Two people had been working on the repository. The project had its first pull request. I was so excited. Now, less than a week later, there are 8 active collaborators on the project, none of whom I have ever met.</p><h3><strong>Step 5 - Crush the Open Source game</strong></h3><p>This step is learning by doing. You will be facing many challenges as you start working on the project with your contributors. My first big challenge was a merge conflict. Google was a great help at that moment, and I was lucky that I could ask for help at my weekly meetup.</p><p>Remember that you have built a space for learning. Your contributors understand that you don’t know how to do everything from the get-go. Treat every new challenge as a learning opportunity. Don’t fear asking your contributors for help or advice. The beauty of Open Source is combining the forces of the entire team. You can all share your individual expertise.</p><h3><strong>Now go do it</strong></h3><p>The moral of the story is that anyone can start an open source project — that means you, too. It doesn’t matter that you don’t have a huge, complicated idea for a giant project. It doesn’t matter that you haven’t been using GitHub for long, or ever. It doesn’t even matter that you don’t have any friends who code with whom you can collaborate. You can do it, and I really hope you will. You will learn so much, and you will help make open source more approachable for other beginners.</p><p>If you have any questions, or you want to talk, feel free to reach me on twitter <a href=\"https://twitter.com/lineal\">@lineal</a> and join my <a href=\"https://github.com/lineaba/prog-o-meter\">Prog-o-meter</a> open source project.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ddcfed041a2f\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/how-i-crushed-my-fear-of-open-source-and-started-my-own-project-and-how-you-can-too-ddcfed041a2f\">How I crushed my fear of open source and started my own project — and how you can, too.</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Linea Brink Andersen",
      "guid": "https://medium.com/p/ddcfed041a2f",
      "categories": [
        "tech",
        "programming",
        "code-newbie",
        "open-source",
        "collaboration"
      ],
      "isoDate": "2018-05-01T15:03:30.000Z"
    },
    {
      "creator": "Vered Rekanati Mordechai",
      "title": "How I went from 33-year-old museum tour guide to professional Web Developer & UX Designer: My…",
      "link": "https://medium.freecodecamp.org/the-post-i-hoped-to-write-for-18-months-2902d074f5ba?source=rss----336d898217ee---4",
      "pubDate": "Sat, 28 Apr 2018 22:35:41 GMT",
      "content:encoded": "<h3>How I went from 33-year-old museum tour guide to professional Web Developer &amp; UX Designer: My 18-month coding journey</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-EJmEkkyqVqxs8W1xq4qog.jpeg\" /><figcaption>A journey happens one step at a time. Image: <a href=\"https://pixabay.com/en/users/PublicDomainArchive-262011/\">PublicDomainArchive</a></figcaption></figure><p>My story is a bit different from the stories you have read so many times. I did not get my first web development job in 3 months. Not in 6 months. Not even in a year. My journey took 18 months, which were tough and frustrating but also exciting and amazing.</p><p>My background, like many other self taught developers, is one that seems as far as possible from any type of technology. I have a Master’s degree in History. I worked as a guide in a museum, as a group facilitator in a non-profit organization, and as a teacher. I loved all of these roles. Otherwise, I wouldn’t have chosen to spend my time doing them.</p><p>At some point I decided to change it all. I wanted to make a bigger impact through my work, especially in non-profit organizations. In addition, after living in 3 countries (in 3 continents) in 6 years, I wanted to start a career that would not require me to find a new job and even a new field each time I move.</p><p>I didn’t need much research to conclude that technology can answer both goals. It can fill my passion to contribute in a (probably the most) meaningful way and it could offer me the freedom to move and relocate while continuing my work.</p><p>I quit my great job as a teacher, left a nice salary and job security behind, and started to be a “full time web development self learner.” That was my title for quite a long time.</p><p>I began learning web development by myself, thinking (after reading some impressive stories here) that all it would take is hard work and 3 to 4 months of studies, and I will be hired as a full time web developer.</p><p>The journey that was ahead of me was very different than what expected. It was much harder than I could imagine. It was confusing, challenging, and made me wonder over and over again if I chose the right path or if I should admit that this is not for me.</p><p>It’s hard and maybe impossible to point out what exactly made my journey different from all of the amazing success stories I’ve read, but a few things immediately come to mind.</p><h3><strong>Not all people thrive alone</strong></h3><p>I’m a people person. I love to be with others, to collaborate, talk, and struggle together. I’m less happy when I’m by myself for a long time because I enjoy the company of others.</p><p>Studying by myself for most of the day, most days, was one of the things that I won’t miss.</p><h3><strong>Not all people love challenges</strong></h3><p>I need to be very brave to admit that not all challenges make me happy and push me to improve myself. Some definitely do.</p><p>I ran two half marathons (does that count as completing one full marathon? 🤷) and it was challenging. I completed a Tough Mudder, and it was challenging. I relocated, including to places where I didn’t speak the language, and it was challenging.</p><p>Although these challenges were amazing and enjoyable, many others were not. I am eager to overcome challenges when I choose them, understand them, and know what I am accepting. In the case of web development I didn’t realize well enough what were the challenges I was going to face. I only came to understand the scope of these challenges further down the road, and that was a tough revelation. Instead of getting excited, I became frustrated.</p><h3><strong>Not everyone is made for coding</strong></h3><p>Wait a second. Don’t eat me alive. I’m not saying that not everyone can learn how to code if they want and put the time and effort. I am just saying that we don’t have the same background, the same way of thinking, and the same intuitions, so the learning process will vary between people. No doubt about that.</p><p>When I decided to learn web development, I had no background whatsoever. I never never never saw myself doing anything that was tech related beyond merely consuming technology like everyone else does.</p><p>For me, learning web development was like jumping into a deep ocean all at once. I remember one conversation I had with my partner a few weeks after I started to learn JavaScript. He had some high school and basic university background in programming, and he tried to explain to me how to solve an early freeCodeCamp challenge. I couldn’t understand what it meant to have an array of elements and what it meant to push an item to the array. The concept was totally foreign to me.</p><p>I’ve since realized that not everyone is made for coding. It comes naturally to some people. Others have been introduced to the basic coding concepts and way of thinking at a young age.</p><p>But for some of us it comes for the first time at age 33, when we have never heard of anything that is even in the same universe as programming concepts.</p><p>Yep, that’s me. I mean, that was me. I figured out the push method, and have since turned 34. 😅</p><h3>My no-regrets dive into the web development ocean</h3><p>Now I have to stop and make sure that I explain myself correctly. I do not regret any of this. If I could decide again, I would take the same path. But I would also make sure that I knew what I was actually committing to. I would align my expectations with reality.</p><p>There is no one way or one answer, but better researching about this journey, before committing to it, could have made a huge difference in the way I experienced things.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/536/1*AJlS8NRfJMc1MX75IDlEsw.png\" /><figcaption>Major milestones in my personal web development journey</figcaption></figure><p>So how did I eventually make it? Thinking retrospectively, there were a few things that helped me overcome these challenges. Before I list them, I have to admit that I’ve read many similar lists and I’ve tried to follow some of them closely, but none of them worked exactly the same way for me.</p><h3>Lessons from the long road</h3><p>At the end of the day, this is a personal journey, so some of the things you read can help you, while others can put you down or just waste your time. I am sharing what I’ve been through, but I’m not saying that this is the winning recipe or the secret magic for your success as well.</p><h4><strong>Have a goal</strong></h4><p>Remind yourself what is your goal. What is your goal for this week? For this month? For this year? And above all — for your journey.</p><p>You can’t do it if you don’t have a clear goal, something to look forward to. I’m not saying that it was always clear to me — I wish it were. But the “what is your goal” question kept presenting itself, and I had to explain to myself why am I doing this. These were the times when my goal and my finish line became clearer.</p><h4>Be honest with yourself</h4><p>This one is a bit odd, I know, but it is one of the most important things I have realized. You will hear so many times what is considered <em>better</em><strong><em> </em></strong>in web development. Backend vs. Frontend, React vs. Vue, Visual Studio Code vs. Atom, Vanilla JS vs. jQuery, Express vs. Hapi, and so on. So many opinions and beliefs. It can be very confusing. It confused me.</p><p>I wanted to prove that I can do everything, understand everything, and be good at everything. And guess what? I was following others’ opinions instead of creating my own.</p><p>I enjoyed some aspects of web development more than others. I struggled with some concepts more than with others. I was happy to write code with some languages and libraries more than with others. So why not create my own path? If people think that X is better than Y, does it mean that Y is <em>my</em> best option?</p><p>Being honest was relieving. It helped me enjoy what I do. I struggled with the challenges I faced, but those were my challenges — not someone else’s. And I was able to channel my creativity by using the tools and technologies that personally excited me.</p><h4><strong>Join communities</strong></h4><p>It’s hard to convey how important it is to become a part of the community of developers, and have those developers around you.</p><p>In my case, it was mostly a virtual community of people from all over the world. And sometimes I was lucky enough to meet people in person and even be a part of a community where I’ve lived.</p><p>It doesn’t matter in what shape or form your community is. As long as you know other people who struggle with you, other people who share similar passions to yours, other people you can look at and tell yourself: “this is how I want to be in the future.” People you can ask for help when you have a question, people you can help when they struggle with something that you’ve already figured out, and people you can rely on when you need some motivation.</p><h4><strong>And just don’t give up</strong></h4><p>At the end of the day, you have to believe that you can do this.</p><p>For long periods of time I had my doubts, but at no point did I get to a place where I felt like I was done trying. I always knew that I could do better, improve, learn, and eventually find a way to make it.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*H2IdmDZkc-S3SoM71J-v2w.jpeg\" /><figcaption>It’s all about the people. image: <a href=\"https://pixabay.com/en/users/geralt-9301/\">geralt</a></figcaption></figure><p>I was very lucky in two important ways. (Yes, luck is another big factor!) The first was the <strong>people and communities</strong> I found along the way. And the second is was the <strong>place</strong> I ended up living in.</p><h3>Communities I joined (by ordered of joining them)</h3><ul><li><a href=\"https://www.freecodecamp.org\">freeCodeCamp</a>: I began my journey with freeCodeCamp, which is a wonderful platform for learning web development, for free, with a rich and devoted online community. Joining and learning with freeCodeCamp helped my dream start to look like it could be a reality.</li><li><a href=\"https://chingu-cohorts.github.io/chingu-directory/\">Chingu</a> is a great online community for people around the world who share similar end goals and are committed to help others and collaborate with each other along the way. It was (and still is) a place where I can create projects as a part of a remote team, but also a place to ask, answer, read, and think together.</li><li><a href=\"https://www.meetup.com/\">Meetup.com</a> was an umbrella that gave me the opportunity to learn a lot and meet many professionals and newbies in person, which was different than virtual communities and led to some great friendships.</li><li><a href=\"https://www.meetup.com/Central-NJ-Design-Meetup/\">Central NJ Design</a> is the main meetup I was a part of, which opened the door to User Experience Design for me. In the end, this turned out to be my current choice of career.</li><li><a href=\"https://foundersandcoders.com/\">Founders and Coders</a> is a web development (tuition free) bootcamp that I had the opportunity to be a part of in Nazareth, Israel. Participating in a full time, full stack, web development program gave me the wings without which I could not fly. I had the chance to create team projects with others, learn from more experienced mentors, meet professionals, and be a part of a community which its goal is to grow its members as developers by thoughtful curriculum and hard work of all people involved.</li></ul><p>I was lucky to have the chance to mentor and work as a developer for the course’s next cohort. Teaching others is known to be one of the most meaningful ways to deepen your knowledge. Going over the materials again — this time as a mentor — pushed me to a better understanding of the concepts and tools I wanted and needed to master. It changed the entire picture for me and encouraged me to start looking for a full time job.</p><h3>Moving to South Bend, Indiana</h3><p>As I mentioned, the other piece of my success in finding a job was — surprisingly — the place where I moved to about 3 months ago. I use the word “surprise” because moving to a Midwest rust-belt city didn’t seem like the best choice in terms of my career. So I thought my only option would be a remote job.</p><p>I applied to 146 jobs (!) but only 9 of them were to companies in commuting distance. From these 9 applications I got 2 offers, after advancing but not getting any offers from the remote jobs.</p><p>I think there are two reasons for that: first, I was more prepared than ever when I applied to the last two places, which were towards the end of my application process, after asking several professionals and friends for advice and feedback regarding my application.</p><p>My confidence was higher when I knew and believed that I had value to offer (which wasn’t the case when I started applying). And my portfolio, GitHub, and projects were much more advanced — so overall I was a stronger applicant.</p><p>But the second point is maybe more surprising. The Midwest city I moved to, South Bend, IN, is apparently a place where technology is flourishing, where there are new exciting startups and young companies, where you feel the new spirit of entrepreneurship, innovation, and technology in their best forms.</p><p>Even as a junior web developer with very little experience, I could find a place where I could fit in, where I could contribute my skills and grow professionally at the same time.</p><p>I ended up getting two great offers, as a User Experience Designer and a Full Stack Web Developer, and wish I could have accepted both.</p><h3>The next step in my coding journey</h3><p>My journey took a very long time and put a lot of pressure on me, on my relationships, and on my partner. But I believe it was worth it. It pushed me to new places, showed me new sides of myself, and gave me the skills and strength I wanted.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VUGfQKhZcL6to2jvoH6UfA.jpeg\" /><figcaption>One of the peaks I’ve reached. I mean, physically.</figcaption></figure><p>The journey is still going. It has no finish line. The good thing is that there are many peaks to reach and mountains to climb. I am happy to know that I have already accomplished some of these goals and I am excited for the others that will come.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2902d074f5ba\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.freecodecamp.org/the-post-i-hoped-to-write-for-18-months-2902d074f5ba\">How I went from 33-year-old museum tour guide to professional Web Developer &amp; UX Designer: My…</a> was originally published in <a href=\"https://medium.freecodecamp.org\">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "dc:creator": "Vered Rekanati Mordechai",
      "guid": "https://medium.com/p/2902d074f5ba",
      "categories": [
        "web-development",
        "design",
        "startup",
        "life-lessons",
        "tech"
      ],
      "isoDate": "2018-04-28T22:35:41.000Z"
    }
  ],
  "feedUrl": "https://medium.freecodecamp.org/feed",
  "title": "freeCodeCamp - Medium",
  "description": "Our community publishes stories worth reading on development, design, and data science. - Medium",
  "webMaster": "yourfriends@medium.com",
  "generator": "Medium",
  "link": "https://medium.freecodecamp.org?source=rss----336d898217ee---4"
}